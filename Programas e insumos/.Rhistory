Nombre_BD_EstOptima <- paste0(Nombre_BD_EstrategiaOpt, "_Propuesta.xlsx")
write.xlsx(x = BDPSList[[EstrategiaOpt]]$BD,
file = Nombre_BD_EstOptima,
colNames = TRUE,
sheetName = "BDI",
overwrite = TRUE
)
# Visualización y exportación gráfico valor portafolio estrategia óptima
Graf_ValPortAcumB100 <- BDPSList[[EstrategiaOpt]]$Graf_ValPortAcumB100 +
ggtitle(paste0("Valor portafolio estrategia ", EstrategiaOpt, " (Base 100)"))
print(Graf_ValPortAcumB100)
ggsave(path = BaseDirPath,
plot = Graf_ValPortAcumB100,
filename = "Valor portafolio estrategia.png",
scale = 2
)
write.xlsx(x = BDPSList[[EstrategiaOpt]]$RAnual,
file = Nombre_BD_EstOptima,
colNames = TRUE,
sheetName = "RetornosAnuales",
overwrite = FALSE
)
write.xlsx(x = BDPSList[[EstrategiaOpt]]$RAnual,
file = Nombre_BD_EstOptima,
colNames = TRUE,
sheetName = "RetornosAnuales"
)
?write.xlsx
write.xlsx(writeData(x = BDPSList[[EstrategiaOpt]]$RAnual),
file = Nombre_BD_EstOptima,
colNames = TRUE,
sheetName = "RetornosAnuales"
)
write.xlsx(writeData(x = BDPSList[[EstrategiaOpt]]$RAnual, wb = paste0(Nombre_BD_EstOptima, ".xlsx")),
file = Nombre_BD_EstOptima,
colNames = TRUE,
sheetName = "RetornosAnuales"
)
write.xlsx(writeData(x = BDPSList[[EstrategiaOpt]]$RAnual, wb = Nombre_BD_EstOptima),
file = Nombre_BD_EstOptima,
colNames = TRUE,
sheetName = "RetornosAnuales"
)
write.xlsx(writeData(wb = Nombre_BD_EstOptima, x = BDPSList[[EstrategiaOpt]]$RAnual),
file = Nombre_BD_EstOptima,
colNames = TRUE,
sheetName = "RetornosAnuales"
)
detach("openxlsx")
load("D:/IDSG/Wissen/GitHub/Swell_2_Optimizacion_estrategias/Programas e insumos/Estrategia y estadísticas NOMBREACTIVO (propuesto hasta paso 12) v0.0.RData")
# Paquetes
Libraries <- c("readxl",      # read_excel
"xlsx",    # write.xlsx
"rstudioapi",  # getActiveDocumentContext
"lubridate",   # makedatetime, year, month,.., second
"ggplot2",     # ggplot
"data.table",  # Data manipulation (aggregation with . operator)
"zoo",         # rollapplyr
"tidyr",       # fill
"dplyr",       # group_by, select, mutate, slice_max
"na.tools"     # na.replace
)
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"
)
)
)
)
}
write.xlsx
?write.xlsx
remove.packages("openxlsx")
library("openxlsx")
library("xlsx")
install.packages("xlsx")
library("xlsx")
class(BDPSList[[EstrategiaOpt]]$RAnual)
load("D:/IDSG/Wissen/GitHub/Swell_2_Optimizacion_estrategias/Programas e insumos/Estrategia y estadísticas NOMBREACTIVO (propuesto hasta paso 12) v0.0.RData")
# 01. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"xlsx",        # write.xlsx
"rstudioapi",  # getActiveDocumentContext
"lubridate",   # makedatetime, year, month,.., second
"ggplot2",     # ggplot
"data.table",  # Data manipulation (aggregation with . operator)
"zoo",         # rollapplyr
"tidyr",       # fill
"dplyr",       # group_by, select, mutate, slice_max
"na.tools"     # na.replace
)
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"
)
)
)
)
}
# Ubicación archivos de origen
BaseDirPath <- dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
# Borrado de información
rm(list = ls())
#Plantillas para gráficos
PlantillaG <- theme(plot.title = element_text(color = "grey20", angle = 0, hjust = 0.5, vjust = 0.5, face = "bold", margin = margin(b = 20)),
plot.subtitle = element_text(color = "grey20", angle = 0, hjust = 0.5, vjust = 0.5, face = "bold", margin = margin(b = 20)),
axis.text.x = element_text(color = "grey20", size = 10, angle = 90, hjust = 0.5, vjust = 0.5, face = "plain", margin = margin(t = 5)),
axis.text.y = element_text(color = "grey20", angle = 0, hjust = 0.5, vjust = 0.5, face = "plain", margin = margin(r = 5)),
axis.title.x = element_text(color = "grey20", angle = 0, hjust = 0.5, vjust = 0.5, face = "plain", margin = margin(t = 10)),
axis.title.y = element_text(color = "grey20", angle = 90, hjust = 0.5, vjust = 0.5, face = "plain", margin = margin(r = 10)),
axis.ticks = element_blank(),
legend.position = "bottom", legend.title = element_text(face = "bold"), legend.text = element_text(size = 10), #legend.direction = "vertical", legend.box = "horizontal", #legend.key.size = unit(1, "cm"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(size=0.5, color = "lightgrey"),
panel.grid.minor.y = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(size=0.5, color = "grey")
)
class(BDPSList[[EstrategiaOpt]]$RAnual)
load("D:/IDSG/Wissen/GitHub/Swell_2_Optimizacion_estrategias/Programas e insumos/Estrategia y estadísticas NOMBREACTIVO (propuesto hasta paso 12) v0.0.RData")
# 13. CÁLCULO ESTADÍSTICAS RETORNO Y RIESGO [PROPUESTA] #######################
Fun_Est_Riesgo_Retorno <- function(BD) {
# Columnas
BD$RET <- c(0, rep(NA, (N-1)))
BD$RET_ACUM <- c(0, rep(NA, (N-1)))
BD$VAL_PORT_ACUM_B100 <- c(100, rep(NA, (N-1)))
BD$PERD_ACUM <- c(0, rep(NA, (N-1)))
BD$MAX_PERD_ACUM <- c(0, rep(NA, (N-1)))
# Retorno de cada FH
BD$RET <- ((BD$VAL_PORT / c(0, BD$VAL_PORT[1:N-1]) - 1)) * c(NA, BD$SENALSIGNO[1:N-1])
# Retorno acumulado y acumulado base 100
BD$RET_ACUM <- c(NA, (cumprod(1 + BD$RET[2:N]) - 1))
BD$VAL_PORT_ACUM_B100 <- (BD$RET_ACUM + 1) * 100
# Pérdidad acumulada y máxima pérdida acumulada
BD$PERD_ACUM <- c(NA, (BD$VAL_PORT_ACUM_B100[2:N]) / (cummax(BD$VAL_PORT_ACUM_B100[2:N])) - 1)
BD$MAX_PERD_ACUM <- c(NA, cummin(BD$PERD_ACUM[2:N]))
# Retornos mensuales
RETMONTHLY <- BD %>% mutate(YEARMONTH = paste0(year(DATE), "-", format(DATE, "%m"))) %>%
select(DATEFRAME, YEARMONTH, RET) %>% group_by(YEARMONTH) %>%
mutate(RETMONTH = cumprod(1 + na.replace(RET, 0)) - 1) %>%
top_n(1, DATEFRAME) %>%
select(-DATEFRAME, -RET)
# Retornos anuales
RETANNUALY <- BD %>% mutate(YEAR = year(DATEFRAME)) %>%
select(DATEFRAME, YEAR, RET) %>% group_by(YEAR) %>%
mutate(RETYEAR = cumprod(1 + na.replace(RET, 0)) - 1) %>%
top_n(1, DATEFRAME)  %>%
select(-DATEFRAME, -RET)
# Estadísticas finales retorno y riesgo
RET_ACUM <- BD$RET_ACUM[N] # Retorno acumulado desde inicio
VAL_PORT_ACUM_B100 <- BD$VAL_PORT_ACUM_B100[N] # Retorno acumulado base 100 desde inicio
RET_ACUM_ANUAL <- (1 + RET_ACUM)^(365*(13-NFHC)/(N-1)) - 1 # Retorno acumulado anualizado desde inicio
MAXPERDACUM <- BD$MAX_PERD_ACUM[N] # Máxima pérdida desde inicio (MDD)
RAA_MPA <- RET_ACUM_ANUAL / -MAXPERDACUM # Retorno anual ajustado por riesgo de pérdida
# Gráfico utilidad acumulada
G_VAL_PORT_ACUM_B100 <- ggplot(BD, aes(x = DATE, y = VAL_PORT_ACUM_B100)) +
geom_line(size = 1) +
ggtitle("Valor portafolio (Base 100)") +
xlab("Fecha") + ylab("Valor (Base 100)") +
expand_limits(x =BD$DATE[1]) +
expand_limits(y = 0) +
PlantillaG
#Resultados
BD_Est_Retorno_Riesgo <- list(BD,
RET_ACUM_ANUAL,
RETMONTHLY,
RETANNUALY,
VAL_PORT_ACUM_B100,
MAXPERDACUM, RAA_MPA,
G_VAL_PORT_ACUM_B100
)
names(BD_Est_Retorno_Riesgo) <- c("BD",
"RetAcumAnual",
"RMensual",
"RAnual",
"VAlPortAcumB100",
"MaxPerdAcum",
"RAA_MPA",
"Graf_ValPortAcumB100"
)
return(BD_Est_Retorno_Riesgo)
}
BDPSList <- lapply(BDPSList, Fun_Est_Riesgo_Retorno) # Construye lista de listas
names(BDPSList) <- rownames(Senales)
# 14. RESUMEN ESTADÍSTICAS ESTRATEGIAS [PROPUESTA] ############################
# Función para obtención de estadísticas totales de retorno y riesgo de cada estrategia
Fun_R_R_Tot <- function(List) {
R_R <- data.frame(RetAcumAnual = List$RetAcumAnual,
VAlPortAcumB100 = List$VAlPortAcumB100,
MaxPerdAcum = List$MaxPerdAcum,
RAA_MPA = List$RAA_MPA
)
return(R_R)
}
# Obtención de estadísticas retorno y riesgo de cada estrategia
SenalesSwell <- Senales
Senales <- cbind(Senales, t(sapply(BDPSList, Fun_R_R_Tot)))
Senales$RetAcum <- unlist(Senales$RetAcum)
Senales$ValAcumB100 <- unlist(Senales$ValAcumB100)
Senales$MaxPerdAcum <- unlist(Senales$MaxPerdAcum)
Senales$RAA_MPA <- unlist(Senales$RAA_MPA)
# Gráfico RetAcum/MDD por estrategia
G_RetAcum_MDD <- ggplot(Senales, aes(x = rownames(Senales), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD por estrategia") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD,
filename = "Ret.Acum_MDD por estrategia.png",
scale = 2
)
# Gráfico RetAcum/MDD para estrategias por encima del promedio
Estrategias_Mayores_Media <-  Senales %>% filter(RAA_MPA > mean(RAA_MPA))
G_RetAcum_MDD_MayMed <- ggplot(Estrategias_Mayores_Media,
aes(x = reorder(rownames(Estrategias_Mayores_Media), RAA_MPA), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD para estrategias por encima del promedio") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD_MayMed)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD_MayMed,
filename = "Ret.Acum_MDD para estrategias por encima del promedio.png",
scale = 2
)
# Gráfico RetAcum/MDD para estrategias por encima del objetivo
RA_MDD_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "RA_MDD_Objetivo",
col_names = FALSE
)
)
Estrategias_Mayores_Objetivo <-  Senales %>% filter(RAA_MPA > RA_MDD_Objetivo)
G_RetAcum_MDD_MayObj <- ggplot(Estrategias_Mayores_Objetivo,
aes(x = reorder(rownames(Estrategias_Mayores_Objetivo), RAA_MPA), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD para estrategias por encima del objetivo") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD_MayObj)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD_MayObj,
filename = "Ret.Acum_MDD para estrategias por encima del objetivo.png",
scale = 2
)
# 15. ESTRATEGIA ÓPTIMA [PROPUESTA] ###########################################
# Identificación estrategia óptima
NEstrategiaOpt <- which.max(Senales$RAA_MPA)
EstrategiaOpt <- rownames(Senales)[NEstrategiaOpt]
paste0("La estrategia óptima es ", EstrategiaOpt)
class(BDPSList[[EstrategiaOpt]]$RAnual)
class(BDPSList[[EstrategiaOpt]]$BD)
write.xlsx(as.data.frame(BDPSList[[EstrategiaOpt]]$BD),
file=Nombre_BD_EstOptima,
sheetName="BDI", append=FALSE
)
# Visualización y exportación estrategia óptima
View(BDPSList[[EstrategiaOpt]]$BD)
Nombre_BD_EstrategiaOpt <- Senales$NombreBD[NEstrategiaOpt]
Nombre_BD_EstOptima <- paste0(Nombre_BD_EstrategiaOpt, "_Propuesta.xlsx")
write.xlsx(as.data.frame(BDPSList[[EstrategiaOpt]]$BD),
file=Nombre_BD_EstOptima,
sheetName="BDI", append=FALSE
)
write.xlsx(as.data.frame(BDPSList[[EstrategiaOpt]]$RAnual),
file=Nombre_BD_EstOptima,
sheetName="RetornosAnuales",
append=TRUE
)
# Memoria
options(java.parameters = '-Xmx4000m')
# Obtención de estadísticas anuales y mensuales de retorno y riesgo de estrategia óptima
View(as.data.frame(BDPSList[[EstrategiaOpt]]$RAnual))
A<-as.data.frame(BDPSList[[EstrategiaOpt]]$RAnual)
A<-BDPSList[[EstrategiaOpt]]$RAnual
# 01. PAQUETES Y CONFIGURACIONES ###############################################
# Memoria
options(java.parameters = '-Xmx4000m')
# Paquetes
Libraries <- c("readxl",      # read_excel
"xlsx",        # write.xlsx
"rstudioapi",  # getActiveDocumentContext
"lubridate",   # makedatetime, year, month,.., second
"ggplot2",     # ggplot
"data.table",  # Data manipulation (aggregation with . operator)
"zoo",         # rollapplyr
"tidyr",       # fill
"dplyr",       # group_by, select, mutate, slice_max
"na.tools"     # na.replace
)
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"
)
)
)
)
}
# Ubicación archivos de origen
BaseDirPath <- dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
# Borrado de información
rm(list = ls())
#Plantillas para gráficos
PlantillaG <- theme(plot.title = element_text(color = "grey20", angle = 0, hjust = 0.5, vjust = 0.5, face = "bold", margin = margin(b = 20)),
plot.subtitle = element_text(color = "grey20", angle = 0, hjust = 0.5, vjust = 0.5, face = "bold", margin = margin(b = 20)),
axis.text.x = element_text(color = "grey20", size = 10, angle = 90, hjust = 0.5, vjust = 0.5, face = "plain", margin = margin(t = 5)),
axis.text.y = element_text(color = "grey20", angle = 0, hjust = 0.5, vjust = 0.5, face = "plain", margin = margin(r = 5)),
axis.title.x = element_text(color = "grey20", angle = 0, hjust = 0.5, vjust = 0.5, face = "plain", margin = margin(t = 10)),
axis.title.y = element_text(color = "grey20", angle = 90, hjust = 0.5, vjust = 0.5, face = "plain", margin = margin(r = 10)),
axis.ticks = element_blank(),
legend.position = "bottom", legend.title = element_text(face = "bold"), legend.text = element_text(size = 10), #legend.direction = "vertical", legend.box = "horizontal", #legend.key.size = unit(1, "cm"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(size=0.5, color = "lightgrey"),
panel.grid.minor.y = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(size=0.5, color = "grey")
)
load("D:/IDSG/Wissen/GitHub/Swell_2_Optimizacion_estrategias/Programas e insumos/Estrategia y estadísticas NOMBREACTIVO (propuesto hasta paso 12) v0.0.RData")
# 13. CÁLCULO ESTADÍSTICAS RETORNO Y RIESGO [PROPUESTA] #######################
Fun_Est_Riesgo_Retorno <- function(BD) {
# Columnas
BD$RET <- c(0, rep(NA, (N-1)))
BD$RET_ACUM <- c(0, rep(NA, (N-1)))
BD$VAL_PORT_ACUM_B100 <- c(100, rep(NA, (N-1)))
BD$PERD_ACUM <- c(0, rep(NA, (N-1)))
BD$MAX_PERD_ACUM <- c(0, rep(NA, (N-1)))
# Retorno de cada FH
BD$RET <- ((BD$VAL_PORT / c(0, BD$VAL_PORT[1:N-1]) - 1)) * c(NA, BD$SENALSIGNO[1:N-1])
# Retorno acumulado y acumulado base 100
BD$RET_ACUM <- c(NA, (cumprod(1 + BD$RET[2:N]) - 1))
BD$VAL_PORT_ACUM_B100 <- (BD$RET_ACUM + 1) * 100
# Pérdidad acumulada y máxima pérdida acumulada
BD$PERD_ACUM <- c(NA, (BD$VAL_PORT_ACUM_B100[2:N]) / (cummax(BD$VAL_PORT_ACUM_B100[2:N])) - 1)
BD$MAX_PERD_ACUM <- c(NA, cummin(BD$PERD_ACUM[2:N]))
# Retornos mensuales
RETMONTHLY <- BD %>% mutate(YEARMONTH = paste0(year(DATE), "-", format(DATE, "%m"))) %>%
select(DATEFRAME, YEARMONTH, RET) %>% group_by(YEARMONTH) %>%
mutate(RETMONTH = cumprod(1 + na.replace(RET, 0)) - 1) %>%
top_n(1, DATEFRAME) %>%
select(-DATEFRAME, -RET)
# Retornos anuales
RETANNUALY <- BD %>% mutate(YEAR = year(DATEFRAME)) %>%
select(DATEFRAME, YEAR, RET) %>% group_by(YEAR) %>%
mutate(RETYEAR = cumprod(1 + na.replace(RET, 0)) - 1) %>%
top_n(1, DATEFRAME)  %>%
select(-DATEFRAME, -RET)
# Estadísticas finales retorno y riesgo
RET_ACUM <- BD$RET_ACUM[N] # Retorno acumulado desde inicio
VAL_PORT_ACUM_B100 <- BD$VAL_PORT_ACUM_B100[N] # Retorno acumulado base 100 desde inicio
RET_ACUM_ANUAL <- (1 + RET_ACUM)^(365*(13-NFHC)/(N-1)) - 1 # Retorno acumulado anualizado desde inicio
MAXPERDACUM <- BD$MAX_PERD_ACUM[N] # Máxima pérdida desde inicio (MDD)
RAA_MPA <- RET_ACUM_ANUAL / -MAXPERDACUM # Retorno anual ajustado por riesgo de pérdida
# Gráfico utilidad acumulada
G_VAL_PORT_ACUM_B100 <- ggplot(BD, aes(x = DATE, y = VAL_PORT_ACUM_B100)) +
geom_line(size = 1) +
ggtitle("Valor portafolio (Base 100)") +
xlab("Fecha") + ylab("Valor (Base 100)") +
expand_limits(x =BD$DATE[1]) +
expand_limits(y = 0) +
PlantillaG
#Resultados
BD_Est_Retorno_Riesgo <- list(BD,
RET_ACUM_ANUAL,
RETMONTHLY,
RETANNUALY,
VAL_PORT_ACUM_B100,
MAXPERDACUM, RAA_MPA,
G_VAL_PORT_ACUM_B100
)
names(BD_Est_Retorno_Riesgo) <- c("BD",
"RetAcumAnual",
"RMensual",
"RAnual",
"VAlPortAcumB100",
"MaxPerdAcum",
"RAA_MPA",
"Graf_ValPortAcumB100"
)
return(BD_Est_Retorno_Riesgo)
}
BDPSList <- lapply(BDPSList, Fun_Est_Riesgo_Retorno) # Construye lista de listas
names(BDPSList) <- rownames(Senales)
# 14. RESUMEN ESTADÍSTICAS ESTRATEGIAS [PROPUESTA] ############################
# Función para obtención de estadísticas totales de retorno y riesgo de cada estrategia
Fun_R_R_Tot <- function(List) {
R_R <- data.frame(RetAcumAnual = List$RetAcumAnual,
VAlPortAcumB100 = List$VAlPortAcumB100,
MaxPerdAcum = List$MaxPerdAcum,
RAA_MPA = List$RAA_MPA
)
return(R_R)
}
# Obtención de estadísticas retorno y riesgo de cada estrategia
SenalesSwell <- Senales
Senales <- cbind(Senales, t(sapply(BDPSList, Fun_R_R_Tot)))
Senales$RetAcum <- unlist(Senales$RetAcum)
Senales$ValAcumB100 <- unlist(Senales$ValAcumB100)
Senales$MaxPerdAcum <- unlist(Senales$MaxPerdAcum)
Senales$RAA_MPA <- unlist(Senales$RAA_MPA)
# Gráfico RetAcum/MDD por estrategia
G_RetAcum_MDD <- ggplot(Senales, aes(x = rownames(Senales), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD por estrategia") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD,
filename = "Ret.Acum_MDD por estrategia.png",
scale = 2
)
# Gráfico RetAcum/MDD para estrategias por encima del promedio
Estrategias_Mayores_Media <-  Senales %>% filter(RAA_MPA > mean(RAA_MPA))
G_RetAcum_MDD_MayMed <- ggplot(Estrategias_Mayores_Media,
aes(x = reorder(rownames(Estrategias_Mayores_Media), RAA_MPA), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD para estrategias por encima del promedio") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD_MayMed)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD_MayMed,
filename = "Ret.Acum_MDD para estrategias por encima del promedio.png",
scale = 2
)
# Gráfico RetAcum/MDD para estrategias por encima del objetivo
RA_MDD_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "RA_MDD_Objetivo",
col_names = FALSE
)
)
Estrategias_Mayores_Objetivo <-  Senales %>% filter(RAA_MPA > RA_MDD_Objetivo)
G_RetAcum_MDD_MayObj <- ggplot(Estrategias_Mayores_Objetivo,
aes(x = reorder(rownames(Estrategias_Mayores_Objetivo), RAA_MPA), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD para estrategias por encima del objetivo") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD_MayObj)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD_MayObj,
filename = "Ret.Acum_MDD para estrategias por encima del objetivo.png",
scale = 2
)
# 15. ESTRATEGIA ÓPTIMA [PROPUESTA] ###########################################
# Identificación estrategia óptima
NEstrategiaOpt <- which.max(Senales$RAA_MPA)
EstrategiaOpt <- rownames(Senales)[NEstrategiaOpt]
paste0("La estrategia óptima es ", EstrategiaOpt)
# Visualización y exportación estrategia óptima
View(BDPSList[[EstrategiaOpt]]$BD)
Nombre_BD_EstrategiaOpt <- Senales$NombreBD[NEstrategiaOpt]
Nombre_BD_EstOptima <- paste0(Nombre_BD_EstrategiaOpt, "_Propuesta.xlsx")
write.xlsx(BDPSList[[EstrategiaOpt]]$BD,
file = Nombre_BD_EstOptima,
sheetName = "BDI",
append = FALSE
)
# Obtención de estadísticas anuales y mensuales de retorno y riesgo de estrategia óptima
View(as.data.frame(BDPSList[[EstrategiaOpt]]$RAnual))
write.xlsx(BDPSList[[EstrategiaOpt]]$RAnual,
file = Nombre_BD_EstOptima,
sheetName = "RetornosAnuales",
append = TRUE
)
class(as.data.frame(BDPSList[[EstrategiaOpt]]$RAnual))
write.xlsx(as.data.frame(BDPSList[[EstrategiaOpt]]$RAnual),
file = Nombre_BD_EstOptima,
sheetName = "RetornosAnuales",
append = TRUE
)
