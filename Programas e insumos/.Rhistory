)
)
)
eval(parse(text = "x1"))
x2 <- "'hello'"
x1 <- c("'hola'","'hello'")
eval(parse(text = "x1"))
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data ETF ECH.xlsx" el archivo que contiene el
#       histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas ETF ECH (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi",  # getActiveDocumentContext
"lubridate",   # makedatetime, year, month,.., second
"ggplot2",     # ggplot
"data.table",  # Data manipulation
"zoo",          # rollapplyr
"tidyr")       # fill
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"
)
)
)
)
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPI <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPI) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Reorganizacion de fechas y franjas horarias
BDPI$DATEFRAME <- make_datetime(year = year(BDPI$DATE),
month = month(BDPI$DATE),
day = day(BDPI$DATE),
hour = hour(BDPI$FRAME),
min = minute(BDPI$FRAME),
sec = second(BDPI$FRAME))
BDPI[,c("DATE","FRAME")] <- NULL
BDPI <- BDPI[,c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
# Tamaño y ordenamiento de datos
N <- length(BDPI$DATEFRAME)
BDPI <- BDPI[order(BDPI$DATEFRAME),]
# 3. CÁLCULO VELA DIARIA ######################################################
BDPD <- BDPI
BDPD$DATE <- as.Date(BDPD$DATEFRAME)
BDPD <- BDPD[,c("DATE","DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
BDPD <- as.data.table(BDPD)
BDPD <- BDPD[,
.(VOLUME = sum(VOLUME),
OPEN = first(OPEN),
HIGH = max(HIGH),
LOW = min(LOW),
CLOSE = last(CLOSE)
),
by = "DATE"
]
# 3. CÁLCULO SEÑALES ##########################################################
# Parametrizacion fractales
ArchivoFractales <- "Parametros fractales.xlsx"
ParamFrac <- read_excel(ArchivoFractales, sheet = "Parametros fractales")
ParamFrac$VentanaMovil <- ParamFrac$`Periodo fin` - ParamFrac$`Periodo inicio` + 1
ParamFrac$Desfase <- -ParamFrac$`Periodo fin`
ParamFrac$NombreRefCompra <- paste0(ParamFrac$`Función compra`,
ParamFrac$`Ref. compra`,
"_",
-ParamFrac$`Periodo inicio`,
"_",
-ParamFrac$`Periodo fin`)
ParamFrac$NombreRefVenta <- paste0(ParamFrac$`Función venta`,
ParamFrac$`Ref. venta`,
"_",
-ParamFrac$`Periodo inicio`,
"_",
-ParamFrac$`Periodo fin`)
ParamFrac$FractalI <- substr(ParamFrac$Estrategia, 1, 3)
ParamFrac$FractalD <- substr(ParamFrac$Estrategia, 7, 9)
ParamFrac$VariableCompraI <- paste0("BDPI$",ParamFrac$`Variable compra`)
ParamFrac$VariableCompraD <- paste0("BDPD$",ParamFrac$`Variable compra`)
ParamFrac$RefCompraI <- paste0("BDPI$",ParamFrac$`Ref. compra`)
ParamFrac$RefCompraD <- paste0("BDPD$",ParamFrac$`Ref. compra`)
ParamFrac$VariableVentaI <- paste0("BDPI$",ParamFrac$`Variable venta`)
ParamFrac$VariableVentaD <- paste0("BDPD$",ParamFrac$`Variable venta`)
ParamFrac$RefVentaI <- paste0("BDPI$",ParamFrac$`Ref. venta`)
ParamFrac$RefVentaD <- paste0("BDPD$",ParamFrac$`Ref. venta`)
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data ETF ECH.xlsx" el archivo que contiene el
#       histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas ETF ECH (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi",  # getActiveDocumentContext
"lubridate",   # makedatetime, year, month,.., second
"ggplot2",     # ggplot
"data.table",  # Data manipulation
"zoo",          # rollapplyr
"tidyr")       # fill
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"
)
)
)
)
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPI <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPI) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Reorganizacion de fechas y franjas horarias
BDPI$DATEFRAME <- make_datetime(year = year(BDPI$DATE),
month = month(BDPI$DATE),
day = day(BDPI$DATE),
hour = hour(BDPI$FRAME),
min = minute(BDPI$FRAME),
sec = second(BDPI$FRAME))
BDPI[,c("DATE","FRAME")] <- NULL
BDPI <- BDPI[,c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
# Tamaño y ordenamiento de datos
N <- length(BDPI$DATEFRAME)
BDPI <- BDPI[order(BDPI$DATEFRAME),]
# 3. CÁLCULO VELA DIARIA ######################################################
BDPD <- BDPI
BDPD$DATE <- as.Date(BDPD$DATEFRAME)
BDPD <- BDPD[,c("DATE","DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
BDPD <- as.data.table(BDPD)
BDPD <- BDPD[,
.(VOLUME = sum(VOLUME),
OPEN = first(OPEN),
HIGH = max(HIGH),
LOW = min(LOW),
CLOSE = last(CLOSE)
),
by = "DATE"
]
# 3. CÁLCULO SEÑALES ##########################################################
# Parametrizacion fractales
ArchivoFractales <- "Parametros fractales.xlsx"
ParamFrac <- read_excel(ArchivoFractales, sheet = "Parametros fractales")
ParamFrac$VentanaMovil <- ParamFrac$`Periodo fin` - ParamFrac$`Periodo inicio` + 1
ParamFrac$Desfase <- -ParamFrac$`Periodo fin`
ParamFrac$NombreRefCompra <- paste0(ParamFrac$`Función compra`,
ParamFrac$`Ref. compra`,
"_",
-ParamFrac$`Periodo inicio`,
"_",
-ParamFrac$`Periodo fin`)
ParamFrac$NombreRefVenta <- paste0(ParamFrac$`Función venta`,
ParamFrac$`Ref. venta`,
"_",
-ParamFrac$`Periodo inicio`,
"_",
-ParamFrac$`Periodo fin`)
ParamFrac$FractalI <- substr(ParamFrac$Estrategia, 1, 3)
ParamFrac$FractalD <- substr(ParamFrac$Estrategia, 7, 9)
ParamFrac$VariableCompraI <- paste0("BDPI$",ParamFrac$`Variable compra`)
ParamFrac$VariableCompraD <- paste0("BDPD$",ParamFrac$`Variable compra`)
ParamFrac$RefCompraI <- paste0("BDPI$",ParamFrac$`Ref. compra`)
ParamFrac$RefCompraD <- paste0("BDPD$",ParamFrac$`Ref. compra`)
ParamFrac$VariableVentaI <- paste0("BDPI$",ParamFrac$`Variable venta`)
ParamFrac$VariableVentaD <- paste0("BDPD$",ParamFrac$`Variable venta`)
ParamFrac$RefVentaI <- paste0("BDPI$",ParamFrac$`Ref. venta`)
ParamFrac$RefVentaD <- paste0("BDPD$",ParamFrac$`Ref. venta`)
# Cálculo de la funcion sobre la referencia para el fractal de compra.
# Ejemplo FI1:
# BDPI$MAX_HIGH_4_1 <- rollapplyr(data = BDPI$HIGH, width = 4, FUN = max, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefCompra[f],
" <- rollapplyr(data = ", ParamFrac$RefCompraI[f],
", width = ", ParamFrac$VentanaMovil[f],
", FUN = ", ParamFrac$`Función compra`[f], ", fill = NA)"
)
)
)
f <- 1
# Cálculo de la funcion sobre la referencia para el fractal de compra.
# Ejemplo FI1:
# BDPI$MAX_HIGH_4_1 <- rollapplyr(data = BDPI$HIGH, width = 4, FUN = max, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefCompra[f],
" <- rollapplyr(data = ", ParamFrac$RefCompraI[f],
", width = ", ParamFrac$VentanaMovil[f],
", FUN = ", ParamFrac$`Función compra`[f], ", fill = NA)"
)
)
)
# Aplicación del desfase de la ventana móvil a la serie.
# Ejemplo FI1:
# BDPI$MAX_HIGH_4_1 <- shift(x = BDPI$MAX_HIGH_4_1, n = 1, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefCompra[f],
" <- shift(x = ", "BDPI$", ParamFrac$NombreRefCompra[f],
", n = ", ParamFrac$Desfase[f], ", fill = NA)"
)
)
)
# Cálculo de la funcion sobre la referencia para el fractal de venta.
# Ejemplo FI1:
# BDPI$MIN_LOW_4_1 <- rollapplyr(data = BDPI$LOW, width = 4, FUN = min, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefVenta[f],
" <- rollapplyr(data = ", ParamFrac$RefVentaI[f],
", width = ", ParamFrac$VentanaMovil[f],
", FUN = ", ParamFrac$`Función venta`[f], ", fill = NA)"
)
)
)
# Aplicación del desfase de la ventana móvil a la serie.
# Ejemplo FI1:
# BDPI$MIN_LOW_4_1 <- shift(x = BDPI$MIN_LOW_4_1, n = 1, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefVenta[f],
" <- shift(x = ", "BDPI$", ParamFrac$NombreRefVenta[f],
", n = ", ParamFrac$Desfase[f], ", fill = NA)"
)
)
)
# Señal del fractal.
# Ejemplo FI1:
# BDPI$FI1 <- ifelse (BDPI$CLOSE > BDPI$MAX_HIGH_4_1, "BUY", ifelse(BDPI$CLOSE < BDPI$MIN_LOW_4_1, "SELL", NA))
eval(parse(text = paste0("BDPI$", ParamFrac$FractalI,
" <- ifelse(",
ParamFrac$VariableCompraI, ParamFrac$`Criterio compra`, "BDPI$", ParamFrac$NombreRefCompra,
", 'BUY', ",
"ifelse(",
ParamFrac$VariableVentaI, ParamFrac$`Criterio venta`, "BDPI$", ParamFrac$NombreRefVenta,
", 'SELL', ",
"NA",
")",
")"
)
)
)
paste0("BDPI$", ParamFrac$FractalI,
" <- ifelse(",
ParamFrac$VariableCompraI, ParamFrac$`Criterio compra`, "BDPI$", ParamFrac$NombreRefCompra,
", 'BUY', ",
"ifelse(",
ParamFrac$VariableVentaI, ParamFrac$`Criterio venta`, "BDPI$", ParamFrac$NombreRefVenta,
", 'SELL', ",
"NA",
")",
")"
)
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data ETF ECH.xlsx" el archivo que contiene el
#       histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas ETF ECH (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi",  # getActiveDocumentContext
"lubridate",   # makedatetime, year, month,.., second
"ggplot2",     # ggplot
"data.table",  # Data manipulation
"zoo",          # rollapplyr
"tidyr")       # fill
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"
)
)
)
)
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPI <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPI) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Reorganizacion de fechas y franjas horarias
BDPI$DATEFRAME <- make_datetime(year = year(BDPI$DATE),
month = month(BDPI$DATE),
day = day(BDPI$DATE),
hour = hour(BDPI$FRAME),
min = minute(BDPI$FRAME),
sec = second(BDPI$FRAME))
BDPI[,c("DATE","FRAME")] <- NULL
BDPI <- BDPI[,c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
# Tamaño y ordenamiento de datos
N <- length(BDPI$DATEFRAME)
BDPI <- BDPI[order(BDPI$DATEFRAME),]
# 3. CÁLCULO VELA DIARIA ######################################################
BDPD <- BDPI
BDPD$DATE <- as.Date(BDPD$DATEFRAME)
BDPD <- BDPD[,c("DATE","DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
BDPD <- as.data.table(BDPD)
BDPD <- BDPD[,
.(VOLUME = sum(VOLUME),
OPEN = first(OPEN),
HIGH = max(HIGH),
LOW = min(LOW),
CLOSE = last(CLOSE)
),
by = "DATE"
]
# 3. CÁLCULO SEÑALES ##########################################################
# Parametrizacion fractales
ArchivoFractales <- "Parametros fractales.xlsx"
ParamFrac <- read_excel(ArchivoFractales, sheet = "Parametros fractales")
ParamFrac$VentanaMovil <- ParamFrac$`Periodo fin` - ParamFrac$`Periodo inicio` + 1
ParamFrac$Desfase <- -ParamFrac$`Periodo fin`
ParamFrac$NombreRefCompra <- paste0(ParamFrac$`Función compra`,
ParamFrac$`Ref. compra`,
"_",
-ParamFrac$`Periodo inicio`,
"_",
-ParamFrac$`Periodo fin`)
ParamFrac$NombreRefVenta <- paste0(ParamFrac$`Función venta`,
ParamFrac$`Ref. venta`,
"_",
-ParamFrac$`Periodo inicio`,
"_",
-ParamFrac$`Periodo fin`)
ParamFrac$FractalI <- substr(ParamFrac$Estrategia, 1, 3)
ParamFrac$FractalD <- substr(ParamFrac$Estrategia, 7, 9)
ParamFrac$VariableCompraI <- paste0("BDPI$",ParamFrac$`Variable compra`)
ParamFrac$VariableCompraD <- paste0("BDPD$",ParamFrac$`Variable compra`)
ParamFrac$RefCompraI <- paste0("BDPI$",ParamFrac$`Ref. compra`)
ParamFrac$RefCompraD <- paste0("BDPD$",ParamFrac$`Ref. compra`)
ParamFrac$VariableVentaI <- paste0("BDPI$",ParamFrac$`Variable venta`)
ParamFrac$VariableVentaD <- paste0("BDPD$",ParamFrac$`Variable venta`)
ParamFrac$RefVentaI <- paste0("BDPI$",ParamFrac$`Ref. venta`)
ParamFrac$RefVentaD <- paste0("BDPD$",ParamFrac$`Ref. venta`)
# Cálculo de la funcion sobre la referencia para el fractal de compra.
# Ejemplo FI1:
# BDPI$MAX_HIGH_4_1 <- rollapplyr(data = BDPI$HIGH, width = 4, FUN = max, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefCompra,
" <- rollapplyr(data = ", ParamFrac$RefCompraI,
", width = ", ParamFrac$VentanaMovil,
", FUN = ", ParamFrac$`Función compra`, ", fill = NA)"
)
)
)
ParamFrac[10,] <- NULL
ParamFrac <- ParamFrac[-c(10),]
# Cálculo de la funcion sobre la referencia para el fractal de compra.
# Ejemplo FI1:
# BDPI$MAX_HIGH_4_1 <- rollapplyr(data = BDPI$HIGH, width = 4, FUN = max, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefCompra,
" <- rollapplyr(data = ", ParamFrac$RefCompraI,
", width = ", ParamFrac$VentanaMovil,
", FUN = ", ParamFrac$`Función compra`, ", fill = NA)"
)
)
)
# Aplicación del desfase de la ventana móvil a la serie.
# Ejemplo FI1:
# BDPI$MAX_HIGH_4_1 <- shift(x = BDPI$MAX_HIGH_4_1, n = 1, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefCompra,
" <- shift(x = ", "BDPI$", ParamFrac$NombreRefCompra,
", n = ", ParamFrac$Desfase, ", fill = NA)"
)
)
)
# Cálculo de la funcion sobre la referencia para el fractal de venta.
# Ejemplo FI1:
# BDPI$MIN_LOW_4_1 <- rollapplyr(data = BDPI$LOW, width = 4, FUN = min, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefVenta,
" <- rollapplyr(data = ", ParamFrac$RefVentaI,
", width = ", ParamFrac$VentanaMovil,
", FUN = ", ParamFrac$`Función venta`, ", fill = NA)"
)
)
)
# Aplicación del desfase de la ventana móvil a la serie.
# Ejemplo FI1:
# BDPI$MIN_LOW_4_1 <- shift(x = BDPI$MIN_LOW_4_1, n = 1, fill = NA)
eval(parse(text = paste0("BDPI$", ParamFrac$NombreRefVenta,
" <- shift(x = ", "BDPI$", ParamFrac$NombreRefVenta,
", n = ", ParamFrac$Desfase, ", fill = NA)"
)
)
)
# Señal del fractal.
# Ejemplo FI1:
# BDPI$FI1 <- ifelse (BDPI$CLOSE > BDPI$MAX_HIGH_4_1, "BUY", ifelse(BDPI$CLOSE < BDPI$MIN_LOW_4_1, "SELL", NA))
eval(parse(text = paste0("BDPI$", ParamFrac$FractalI,
" <- ifelse(",
ParamFrac$VariableCompraI, ParamFrac$`Criterio compra`, "BDPI$", ParamFrac$NombreRefCompra,
", 'BUY', ",
"ifelse(",
ParamFrac$VariableVentaI, ParamFrac$`Criterio venta`, "BDPI$", ParamFrac$NombreRefVenta,
", 'SELL', ",
"NA",
")",
")"
)
)
)
