BDP = BDPS_List,
FI = ParamFracI$Fractal[1],
FIR = ParamFracR$Fractal[1]
)
BDPS_Listota <- lapply(X = BDPS_List,
FUN = CrearBDPI,
FI = ParamFracI$Fractal,
FIR = ParamFracR$Fractal)
View(BDPS_Listota)
BDPS_Listota <- lapply(X = BDPI,
FUN = CrearBDPI,
FI = ParamFracI$Fractal,
FIR = ParamFracR$Fractal)
BDPS_Listota <- mapply(FUN = CrearBDPI,
BDP = BDPS_List,
FI = ParamFracI$Fractal[1],
FIR = ParamFracR$Fractal[1]
)
BDPS_Listota <- lapply(X = BDPS_List,
FUN = CrearBDPI,
FI = ParamFracI$Fractal,
FIR = ParamFracR$Fractal)
paste0("BDP_I1_R1",
" <- BDPI[,",
",",
"match(",
c("DATE",
"DATEFRAME",
"VOLUME",
"OPEN",
"HIGH",
"LOW",
"CLOSE",
"FI1",
"FIR1",
)",
",",
"colnames(BDPI)",
")",
]
)
#AQUÍ VAMOOOS
FunBDPSList <- paste0("BDP_I", Senales$I, "_R", Senales$R,
" <- BDPI[",
"match(",
"c('DATE',",
"'DATEFRAME',",
"'VOLUME',",
"'OPEN',",
"'HIGH',",
"'LOW',",
"'CLOSE',",
"'", Senales$FI, "' ," ,
"'",  Senales$FIR, "'",
")",
",",
" colnames(BDPI)",
")",
"]"
)
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data NOMBREACTIVO.xlsx" el archivo que contiene
#       el histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas NOMBREACTIVO (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 0.3.2 Guardar con el nombre "Parametros fractales.xlsx" el archivo que contiene
#       las reglas y variables que se emplean para las condiciones de compra y
#       venta de cada una de las estrategias diarias e intradiarias, así como
#       de la estrategia intradiaria de referencia, que debe quedar en el última
#       fila del archivo. Se debe verificar que el archivo solo contenga la
#       información mencionada y nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi",  # getActiveDocumentContext
"lubridate",   # makedatetime, year, month,.., second
"ggplot2",     # ggplot
"data.table",  # Data manipulation
"zoo",          # rollapplyr
"tidyr")       # fill
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"
)
)
)
)
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPI <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPI) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Reorganizacion de fechas y franjas horarias
BDPI$DATEFRAME <- make_datetime(year = year(BDPI$DATE),
month = month(BDPI$DATE),
day = day(BDPI$DATE),
hour = hour(BDPI$FRAME),
min = minute(BDPI$FRAME),
sec = second(BDPI$FRAME)
)
BDPI[,c("DATE","FRAME")] <- NULL
BDPI <- BDPI[,c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
# Tamaño y ordenamiento de datos
N <- length(BDPI$DATEFRAME)
BDPI <- BDPI[order(BDPI$DATEFRAME),]
# 3. CODIFICACIÓN DE FRACTALES INTRADIARIOS ##################################
# Insumos parametrización FI
ArchivoFractales <- "Parametros fractales.xlsx"
ParamFracI <- read_excel(ArchivoFractales, sheet = "Parametros fractales")
NFrac <- length(ParamFracI$Estrategia) - 1 # Número de fractales (se asume que la última fila corresponde a FIRX)
ParamFracI <- ParamFracI[-(NFrac+1),] # Eliminación de parámetros del fractal intradiario de referencia
# Variables de codificación de fractales intradiarios
ParamFracI$VentanaMovil <- ParamFracI$`Periodo fin` - ParamFracI$`Periodo inicio` + 1
ParamFracI$Desfase <- -ParamFracI$`Periodo fin`
ParamFracI$Fractal <- paste0("FI", ParamFracI$Estrategia)
ParamFracI$NombreRefCompra <- paste0(ParamFracI$Fractal,
"_B_",
ParamFracI$`Función compra`,
"_",
ParamFracI$`Ref. compra`,
"_",
-ParamFracI$`Periodo inicio`,
"_",
-ParamFracI$`Periodo fin`
)
ParamFracI$NombreRefVenta <- paste0(ParamFracI$Fractal,
"_S_",
ParamFracI$`Función venta`,
"_",
ParamFracI$`Ref. venta`,
"_",
-ParamFracI$`Periodo inicio`,
"_",
-ParamFracI$`Periodo fin`
)
ParamFracI$VariableCompra <- paste0("BDPI$",ParamFracI$`Variable compra`)
ParamFracI$RefCompra <- paste0("BDPI$",ParamFracI$`Ref. compra`)
ParamFracI$VariableVenta <- paste0("BDPI$",ParamFracI$`Variable venta`)
ParamFracI$RefVenta <- paste0("BDPI$",ParamFracI$`Ref. venta`)
# 4. CÁLCULO SEÑALES DE FRACTALES INTRADIARIOS ################################
# Cálculo de la función sobre la referencia correspondiente a cada fractal
# intradiario de compra.Ejemplo FI1:
# BDPI$FI1_B_max_HIGH_4_1 <- rollapplyr(data = BDPI$HIGH, width = 4, FUN = max, fill = NA)
FunFracCompra <- paste0("BDPI$", ParamFracI$NombreRefCompra,
" <- rollapplyr(data = ", ParamFracI$RefCompra,
", width = ", ParamFracI$VentanaMovil,
", FUN = ", ParamFracI$`Función compra`, ", fill = NA)"
)
eval(parse(text = FunFracCompra))
# Aplicación del desfase de la ventana móvil correspondiente a cada fractal
# intradiario de compra.Ejemplo FI1:
# BDPI$FI1_B_max_HIGH_4_1 <- shift(x = BDPI$FI1_B_max_HIGH_4_1, n = 1, fill = NA)
FunDesfaseCompra <- paste0("BDPI$", ParamFracI$NombreRefCompra,
" <- shift(x = ", "BDPI$", ParamFracI$NombreRefCompra,
", n = ", ParamFracI$Desfase, ", fill = NA)"
)
eval(parse(text = FunDesfaseCompra))
# Cálculo de la función sobre la referencia correspondiente a cada fractal
# intradiario de venta. Ejemplo FI1:
# BDPI$FI1_S_min_LOW_4_1 <- rollapplyr(data = BDPI$LOW, width = 4, FUN = min, fill = NA)
FunFracVenta <- paste0("BDPI$", ParamFracI$NombreRefVenta,
" <- rollapplyr(data = ", ParamFracI$RefVenta,
", width = ", ParamFracI$VentanaMovil,
", FUN = ", ParamFracI$`Función venta`, ", fill = NA)"
)
eval(parse(text = FunFracVenta))
# Aplicación del desfase de la ventana móvil correspondiente a cada fractal
# intradiario de venta. Ejemplo FI1:
# BDPI$FI1_S_min_LOW_4_1 <- shift(x = BDPI$FI1_S_min_LOW_4_1, n = 1, fill = NA)
FunDesfaseVenta <-paste0("BDPI$", ParamFracI$NombreRefVenta,
" <- shift(x = ", "BDPI$", ParamFracI$NombreRefVenta,
", n = ", ParamFracI$Desfase, ", fill = NA)"
)
eval(parse(text = FunDesfaseVenta))
# Señal para condiciones de "BUY" o "SELL" en cada fractal intradiario. Ejemplo FI1:
# BDPI$FI1 <- ifelse (BDPI$CLOSE > BDPI$FI1_B_max_HIGH_4_1, "BUY", ifelse(BDPI$CLOSE < BDPI$FI1_S_min_LOW_4_1, "SELL", NA))
FunSenFIX <- paste0("BDPI$", ParamFracI$Fractal,
" <- ifelse(",
ParamFracI$VariableCompra, ParamFracI$`Criterio compra`, "BDPI$", ParamFracI$NombreRefCompra,
", 'BUY', ",
"ifelse(",
ParamFracI$VariableVenta, ParamFracI$`Criterio venta`, "BDPI$", ParamFracI$NombreRefVenta,
", 'SELL', ",
"NA",
")",
")"
)
eval(parse(text = FunSenFIX))
# Señal para cada fractal intradiario cuando no se cumplen las condiciones de "BUY" o "SELL".
BDPI <- fill(data = BDPI, ParamFracI$Fractal, .direction = "down")
# 5. VELA DIARIA #############################################################
BDPD <- BDPI
BDPD$DATE <- as.Date(BDPD$DATEFRAME)
BDPD <- BDPD[,c("DATE","DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
BDPD <- as.data.table(BDPD)
BDPD <- BDPD[,
.(VOLUME = sum(VOLUME),
OPEN = first(OPEN),
HIGH = max(HIGH),
LOW = min(LOW),
CLOSE = last(CLOSE)
),
by = "DATE"
]
# 6. CODIFICACIÓN DE FRACTALES DIARIOS (INCLUYE FIRX) #########################
# Variables de codificación de fractales diarios
ParamFracD <- read_excel(ArchivoFractales, sheet = "Parametros fractales")
# Insumos parametrización FIR
ParamFracD[(NFrac+2):(NFrac*2),] <- ParamFracD[(NFrac+1),] # Réplica de parámetros de FIR
LetraFIR <- "R" # Letra para identificación de fractales intradiarios de referencia
ParamFracD$Estrategia[(NFrac+1):(NFrac*2)] <- paste0(LetraFIR, (1:NFrac)) # Asignación de nombres de estrategias de referencia
ParamFracD$`Periodo inicio`[(NFrac+1):(NFrac*2)] <- ParamFracD$`Periodo inicio`[1:NFrac] # Réplica de periodo inicio de estrategia
ParamFracD$`Periodo fin`[(NFrac+1):(NFrac*2)] <- ParamFracD$`Periodo fin`[1:NFrac] # Réplica de periodo fin de estrategia
ParamFracD$VentanaMovil <- ParamFracD$`Periodo fin` - ParamFracD$`Periodo inicio` + 1
ParamFracD$Desfase <- -ParamFracD$`Periodo fin`
ParamFracD$Fractal <- paste0("FD", ParamFracD$Estrategia)
ParamFracD$NombreRefCompra <- paste0(ParamFracD$Fractal,
"_B_",
ParamFracD$`Función compra`,
"_",
ParamFracD$`Ref. compra`,
"_",
-ParamFracD$`Periodo inicio`,
"_",
-ParamFracD$`Periodo fin`
)
ParamFracD$NombreRefVenta <- paste0(ParamFracD$Fractal,
"_S_",
ParamFracD$`Función venta`,
"_",
ParamFracD$`Ref. venta`,
"_",
-ParamFracD$`Periodo inicio`,
"_",
-ParamFracD$`Periodo fin`
)
ParamFracD$VariableCompra <- paste0("BDPD$",ParamFracD$`Variable compra`)
ParamFracD$RefCompra <- paste0("BDPD$",ParamFracD$`Ref. compra`)
ParamFracD$VariableVenta <- paste0("BDPD$",ParamFracD$`Variable venta`)
ParamFracD$RefVenta <- paste0("BDPD$",ParamFracD$`Ref. venta`)
# Separación entre parámetros para FIR y para FD
ParamFracR <- ParamFracD[match(paste0(LetraFIR,(1:NFrac)),ParamFracD$Estrategia),]
ParamFracR$Fractal <- paste0("FI", ParamFracR$Estrategia) # Asignación de de nombres para FIRX
ParamFracD <- ParamFracD[-match(paste0(LetraFIR,(1:NFrac)),ParamFracD$Estrategia),] # Eliminación parámetros creados para FIRX.
ParamFracR$VariableCompra <- paste0("BDPI$",ParamFracD$`Variable compra`)
ParamFracR$VariableVenta <- paste0("BDPI$",ParamFracD$`Variable venta`)
# 7. CÁLCULO SEÑALES DE FRACTALES DIARIOS #####################################
# Cálculo de la función sobre la referencia correspondiente a cada fractal
# diario de compra.Ejemplo FD1:
# BDPD$FD1_B_max_HIGH_4_1 <- rollapplyr(data = BDPD$HIGH, width = 4, FUN = max, fill = NA)
FunFracCompra <- paste0("BDPD$", ParamFracD$NombreRefCompra,
" <- rollapplyr(data = ", ParamFracD$RefCompra,
", width = ", ParamFracD$VentanaMovil,
", FUN = ", ParamFracD$`Función compra`, ", fill = NA)"
)
eval(parse(text = FunFracCompra))
# Aplicación del desfase de la ventana móvil correspondiente a cada fractal
# diario de compra.Ejemplo FD1:
# BDPD$FD1_B_max_HIGH_4_1 <- shift(x = BDPD$FD1_B_max_HIGH_4_1, n = 1, fill = NA)
FunDesfaseCompra <- paste0("BDPD$", ParamFracD$NombreRefCompra,
" <- shift(x = ", "BDPD$", ParamFracD$NombreRefCompra,
", n = ", ParamFracD$Desfase, ", fill = NA)"
)
eval(parse(text = FunDesfaseCompra))
# Cálculo de la función sobre la referencia correspondiente a cada fractal
# diario de venta. Ejemplo FD1:
# BDPD$FD1_S_min_LOW_4_1 <- rollapplyr(data = BDPD$LOW, width = 4, FUN = min, fill = NA)
FunFracVenta <- paste0("BDPD$", ParamFracD$NombreRefVenta,
" <- rollapplyr(data = ", ParamFracD$RefVenta,
", width = ", ParamFracD$VentanaMovil,
", FUN = ", ParamFracD$`Función venta`, ", fill = NA)"
)
eval(parse(text = FunFracVenta))
# Aplicación del desfase de la ventana móvil correspondiente a cada fractal
# diario de venta. Ejemplo FD1:
# BDPD$FD1_S_min_LOW_4_1 <- shift(x = BDPD$FD1_S_min_LOW_4_1, n = 1, fill = NA)
FunDesfaseVenta <- paste0("BDPD$", ParamFracD$NombreRefVenta,
" <- shift(x = ", "BDPD$", ParamFracD$NombreRefVenta,
", n = ", ParamFracD$Desfase, ", fill = NA)"
)
eval(parse(text = FunDesfaseVenta))
# Señal para condiciones de "BUY" o "SELL" en cada fractal diario. Ejemplo FD1:
# BDPD$FD1 <- ifelse (BDPD$CLOSE > BDPD$FD1_B_max_HIGH_4_1, "BUY", ifelse(BDPD$CLOSE < BDPD$FD1_S_min_LOW_4_1, "SELL", NA))
FunSenFDX <- paste0("BDPD$", ParamFracD$Fractal,
" <- ifelse(",
ParamFracD$VariableCompra, ParamFracD$`Criterio compra`, "BDPD$", ParamFracD$NombreRefCompra,
", 'BUY', ",
"ifelse(",
ParamFracD$VariableVenta, ParamFracD$`Criterio venta`, "BDPD$", ParamFracD$NombreRefVenta,
", 'SELL', ",
"NA",
")",
")"
)
eval(parse(text = FunSenFDX))
# Señal para cada fractal diario cuando no se cumplen las condiciones de "BUY" o "SELL".
BDPD <- fill(data = BDPD, ParamFracD$Fractal, .direction = "down")
# 8. CÁLCULO FUNCIONES SOBRE REFERENCIAS DE FRACTALES DIARIOS DE REFERENCIA ####
# Cálculo de la función sobre la referencia correspondiente a cada fractal
# diario de referencia de compra.Ejemplo FDR1:
# BDPD$FDR1_B_max_HIGH_4_1 <- rollapplyr(data = BDPD$HIGH, width = 4, FUN = max, fill = NA)
FunFracCompra <- paste0("BDPD$", ParamFracR$NombreRefCompra,
" <- rollapplyr(data = ", ParamFracR$RefCompra,
", width = ", ParamFracR$VentanaMovil,
", FUN = ", ParamFracR$`Función compra`, ", fill = NA)"
)
eval(parse(text = FunFracCompra))
# Aplicación del desfase de la ventana móvil correspondiente a cada fractal
# diario de referencia de compra.Ejemplo FDR1:
# BDPD$FDR1_B_max_HIGH_4_1 <- shift(x = BDPD$FD1_B_max_HIGH_4_1, n = 1, fill = NA)
FunDesfaseCompra <- paste0("BDPD$", ParamFracR$NombreRefCompra,
" <- shift(x = ", "BDPD$", ParamFracR$NombreRefCompra,
", n = ", ParamFracR$Desfase, ", fill = NA)"
)
eval(parse(text = FunDesfaseCompra))
# Cálculo de la función sobre la referencia correspondiente a cada fractal
# diario de referencia de venta. Ejemplo FDR1:
# BDPD$FDR1_S_min_LOW_4_1 <- rollapplyr(data = BDPD$LOW, width = 4, FUN = min, fill = NA)
FunFracVenta <- paste0("BDPD$", ParamFracR$NombreRefVenta,
" <- rollapplyr(data = ", ParamFracR$RefVenta,
", width = ", ParamFracR$VentanaMovil,
", FUN = ", ParamFracR$`Función venta`, ", fill = NA)"
)
eval(parse(text = FunFracVenta))
# Aplicación del desfase de la ventana móvil correspondiente a cada fractal
# diario de referencia de venta. Ejemplo FDR1:
# BDPD$FDR1_S_min_LOW_4_1 <- shift(x = BDPD$FDR1_S_min_LOW_4_1, n = 1, fill = NA)
FunDesfaseVenta <-paste0("BDPD$", ParamFracR$NombreRefVenta,
" <- shift(x = ", "BDPD$", ParamFracR$NombreRefVenta,
", n = ", ParamFracR$Desfase, ", fill = NA)"
)
eval(parse(text = FunDesfaseVenta))
# 9. CÁLCULO SEÑALES DE FRACTALES INTRADIARIOS DE REFERENCIA ##################
# Identificación de fecha
BDPI$DATE <- NA
BDPI$DATE <- make_datetime(year = year(BDPI$DATEFRAME),
month = month(BDPI$DATEFRAME),
day = day(BDPI$DATEFRAME),
)
# Importe a la base de datos intradiaria de la función sobre la referencia
# correspondiente a cada fractal diario de referencia de venta. Ejemplo FDR1:
# BDPI$FDR1_B_max_HIGH_4_1 <- BDPD$FDR1_B_max_HIGH_4_1[match(as.Date(BDPI$DATE), BDPD$DATE)]
FunImporteFDRCompra <- paste0("BDPI$", ParamFracR$NombreRefCompra,
" <- BDPD$", ParamFracR$NombreRefCompra,
"[match(as.Date(BDPI$DATE), BDPD$DATE)]"
)
eval(parse(text = FunImporteFDRCompra))
# Importe a la base de datos intradiaria de la función sobre la referencia
# correspondiente a cada fractal diario de referencia de compra. Ejemplo FDR1:
# BDPI$FDR1_S_min_LOW_4_1 <- BDPD$FDR1_S_min_LOW_4_1[match(as.Date(BDPI$DATE), BDPD$DATE)]
FunImporteFDRVenta <- paste0("BDPI$", ParamFracR$NombreRefVenta,
" <- BDPD$", ParamFracR$NombreRefVenta,
"[match(as.Date(BDPI$DATE), BDPD$DATE)]"
)
eval(parse(text = FunImporteFDRVenta))
# Señal para condiciones de "BUY" o "SELL" en cada fractal intradiario de
# referencia. Ejemplo FIR1:
# BDPI$FIR1 <- ifelse (BDPI$CLOSE > BDPI$FDR1_B_max_HIGH_4_1, "BUY", ifelse(BDPI$CLOSE < BDPI$FDR1_S_min_LOW_4_1, "SELL", NA))
FunSenFIRX_BS <- paste0("BDPI$", ParamFracR$Fractal,
" <- ifelse(",
ParamFracR$VariableCompra, ParamFracR$`Criterio compra`, "BDPI$", ParamFracR$NombreRefCompra,
", 'BUY', ",
"ifelse(",
ParamFracR$VariableVenta, ParamFracR$`Criterio venta`, "BDPI$", ParamFracR$NombreRefVenta,
", 'SELL', ",
"NA",
")",
")"
)
eval(parse(text = FunSenFIRX_BS))
# Aplicación de un desfase a cada fractal diario para su asignación a FIRX
# cuando no se cumplen las condiciones de "BUY" o "SELL". Ejemplo FD1_NoBS:
# BDPD$FD1_NoBS <- shift(x = BDPD$FD1, n = DesfaseNoBS, fill = NA)
DesfaseNoBS <- 1
FunSenFDX_NoBS <- paste0("BDPD$", ParamFracD$Fractal, "_NoBS",
" <- shift(",
"x = ", "BDPD$", ParamFracD$Fractal,
", ",
"n = ", DesfaseNoBS,
", ",
"fill = NA",
")"
)
eval(parse(text = FunSenFDX_NoBS))
# Señal para cada fractal intradiario de referencia cuando no se cumplen las
# condiciones de "BUY" o "SELL".
# Importe de señal diaria empleada cuando no se cumplen las condiciones de
# "BUY" o "SELL", desde base de datos diaria a base de datos intradiaria.
# Ejemplo importe FD1_NoBS:
# BDPI$FD1_NoBS <- BDPD$FD1_NoBS[match(BDPI$DATE, BDPD$DATE)]
FunSenFDX_NoBS_I <- paste0("BDPI$", ParamFracD$Fractal, "_NoBS",
" <- BDPD$", ParamFracD$Fractal, "_NoBS",
"[match(as.Date(BDPI$DATE), BDPD$DATE)]"
)
eval(parse(text = FunSenFDX_NoBS_I))
# Ejemplo asignación a FIR1 de señal diaria empleada cuando no se cumplen las
# condiciones de "BUY" o "SELL":
# BDPI$FIR1 <- ifelse(is.na(BDPI$FIR1), BDPI$FD1_NoBS, BDPI$FIR1)
FunSenFIRX <- paste0("BDPI$", ParamFracR$Fractal,
" <- ifelse(",
"is.na(", "BDPI$", ParamFracR$Fractal, ")",
", ",
"BDPI$", ParamFracD$Fractal, "_NoBS",
", ",
"BDPI$", ParamFracR$Fractal,
")"
)
eval(parse(text = FunSenFIRX))
# 10. CÁLCULO SEÑAL INTRADIARIA FINAL #########################################
Senales <- data.frame(NombreBD = rep(NA, NFrac^2),
I = rep(1:NFrac,rep(NFrac, NFrac)),
R = rep(1:NFrac, NFrac),
FI = paste0("FI",rep(1:NFrac,rep(NFrac, NFrac))),
FIR = paste0("FIR", rep(1:NFrac, NFrac))
)
Senales$NombreBD <- paste0("BDP_I", Senales$I, "_R", Senales$R)
#AQUÍ VAMOOOS
FunBDPSList <- paste0("BDP_I", Senales$I, "_R", Senales$R,
" <- BDPI[",
"match(",
"c('DATE',",
"'DATEFRAME',",
"'VOLUME',",
"'OPEN',",
"'HIGH',",
"'LOW',",
"'CLOSE',",
"'", Senales$FI, "' ," ,
"'",  Senales$FIR, "'",
")",
",",
" colnames(BDPI)",
")",
"]"
)
FunBDPSList
View(Senales)
#AQUÍ VAMOOOS
FunBDPSList <- paste0(Senales$NombreBD,
" <- BDPI[",
"match(",
"c('DATE',",
"'DATEFRAME',",
"'VOLUME',",
"'OPEN',",
"'HIGH',",
"'LOW',",
"'CLOSE',",
"'", Senales$FI, "' ," ,
"'",  Senales$FIR, "'",
")",
",",
" colnames(BDPI)",
")",
"]"
)
FunBDPSList
FF <- function(BD,FI,FR) {
BDP_IX_RX <- BD[match(c('DATE','DATEFRAME','VOLUME','OPEN','HIGH','LOW','CLOSE',FI ,FR), colnames(BD))]
return(BDP_IX_RX)
}
VFF <- Vectorize(FF, vectorize.args = c("FI", "FR"))
BDs <- list(VFF(BDPI, Senales$FI, Senales$FIR))
View(BDs)
BDs <- VFF(BDPI, Senales$FI, Senales$FIR)
df <- rep("BDPI", 81)
BDPS_List <- lapply(df, get)
View(BDPS_List)
BDPS_List <- VFF(BDPI, Senales$FI, Senales$FIR)
BDPS_List <- list(VFF(BDPI, Senales$FI, Senales$FIR))
View(BDPS_List)
