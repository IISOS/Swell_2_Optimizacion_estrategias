# Aesthetics: Color Brewer####
# https://ggplot2.tidyverse.org/reference/scale_brewer.html
# https://rpubs.com/seslezak/color_schemes
# install.packages('RColorBrewer)
library(RColorBrewer)
display.brewer.all()
display.brewer.pal(n = 3, name = "Blues")
display.brewer.pal(n = 4, name = "Blues")
display.brewer.pal(n = 5, name = "Blues")
g + geom_point(aes(color = class)) +
scale_color_brewer(palette = 'Blues')
g + geom_point(aes(color = class)) +
scale_color_brewer(palette = 'Greens')
g + geom_point(aes(color = class)) +
scale_color_brewer(palette = 'Set1')
# Aesthetics: Shape ####
g + geom_point(aes(shape = class))
g + geom_point(aes(shape = class)) +
scale_shape_manual(values = 1:7)
g + geom_point(aes(shape = class)) +
scale_shape_manual(values = 1:7,name ='MyLegend')
g + geom_point(aes(shape = class)) +
scale_shape_manual(values = c('a','b','c','d','e','f','g'))
g + geom_point(aes(shape = class)) +
scale_shape_manual(values = c('*','.','$','%','?','0','~'))
g + geom_point(aes(shape = class, color = class))
g + geom_point(aes(shape = class)) + geom_point(aes(color = class))
# Themes ####
g + geom_point(aes(color = class))
g + geom_point(aes(color = class)) + theme()
g + geom_point(aes(color = class)) + theme_classic()
g + geom_point(aes(color = class)) + theme_bw()
g + geom_point(aes(color = class)) + theme_dark()
g + geom_point(aes(color = class)) + theme_void()
# Facets ####
g + geom_point() + facet_grid(. ~ cyl)
g + geom_point() + facet_grid(drv ~ .)
g + geom_point() + facet_grid(drv ~ cyl)
g + geom_point() + facet_wrap( ~ class)
g + geom_point() + facet_grid(drv ~ cyl)
g + geom_point() + facet_wrap( ~ class)
# Geometries: Smoothing ####
g + geom_point() + geom_smooth(se = FALSE)
# Geometries: Box Plots ####
g = ggplot(data = mpg, aes(x = class, y = hwy))
g + geom_boxplot()
g = ggplot(data = mpg, aes(x = reorder(class,hwy,median), y = hwy))
g = ggplot(data = mpg, aes(x = reorder(class,hwy,median), y = hwy))
# Geometries: Box Plots ####
g = ggplot(data = mpg, aes(x = class, y = hwy))
g + geom_boxplot()
g = ggplot(data = mpg, aes(x = reorder(class,hwy,median), y = hwy))
g + geom_boxplot()
# Geometries: Box Bars ####
g = ggplot(data = mpg,aes(x = drv))
g + geom_bar()
g + geom_bar(aes(fill = drv))
g + geom_bar(aes(fill = drv))
g + geom_bar(aes(fill = fl))
g + geom_bar(aes(fill = model))
g + geom_bar(aes(fill = fl))
g + geom_bar(aes(fill = fl), position = 'fill')
g + geom_bar(aes(fill = fl), position = 'dodge')
# Geometries: Jitter ####
g = ggplot(data = mpg, aes(x = cty, y = hwy))
g + geom_point()
g + geom_jitter()
g + geom_jitter() # Remove overlap. Why?
# Geometries: Histogram ####
g = ggplot(data = mpg,aes(x = hwy))
g + geom_histogram()
g + geom_histogram(binwidth = 5)
g + geom_histogram(bins = 4)
# Geometries: Histogram: Multiple ####
g + geom_histogram() + facet_wrap(~drv)
# Geometries: Histogram: Multiple ####
g + geom_histogram() + facet_wrap(~drv) # Divide/Section data by another variable
g + geom_freqpoly() + facet_wrap(~drv)
g + geom_density() + facet_wrap(~drv)
g + geom_freqpoly(aes(color = drv))
g + geom_density(aes(color = drv))
# Geometries: Large Data ####
g = ggplot(data = diamonds, aes(x = carat, y = price))
g + geom_point()
g + geom_bin2d()
g + geom_point() + geom_density2d()
g + geom_smooth()
g + geom_smooth(aes(group = cut))
g + geom_smooth(aes(color = cut))
g + geom_smooth(aes(color = cut), se=F)
g + geom_smooth(aes(color = cut), se=F, method = 'lm')
g + geom_smooth(aes(color = cut), se=F, method = 'loess') #
# Large Data Aesthetics ####
g + geom_point(size = 1.0, alpha = 1.0)
# Large Data Aesthetics ####
g + geom_point(size = 1.0, alpha = 1.0)
g + geom_point(size = 0.5, alpha = 1.0)
g + geom_point(size = 1.0, alpha = 0.1)
g + geom_point(size = 0.5, alpha = 0.1)
install.packages("shiny")
library(shiny)
library(shiny)
# Updating on Windows is apparently tricky.
# A package called installr, which is only for Windows can be used to ease the process.
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# using the package:
updateR()
# This will start the updating process of your R installation.
# It will check for newer versions, and if one is available, will guide you through the decisions you’d need to make.
# using the package:
updateR()
require(installr)
# using the package:
updateR()
install.packages("shiny")
runExample("01_hello")
library(shiny)
runExample("01_hello")
runExample()
runExample("01_hello")
# Source
runExample("02_text")
?order
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data ETF ECH.xlsx" el archivo que contiene el
#       histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas ETF ECH (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi")  # getActiveDocumentContext
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"))))
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPS <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPS) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Tamaño y ordenamiento de datos
N <- length(BDPS$DATE)
View(BDPS)
View(BDPS)
summary(BDPS)
str(BDPS)
install.packages("lubridate")
library("lubridate")
hour(BDPS$FRAME[1])
?parse_date_time
year(BDPS$FRAME[1]) <- year(BDPS$DATE[1])
BDPS$DATE <- make_datetime(year = year(BDPS$DATE), month = month(BDPS$DATE), day = day(BDPS$DATE), hour = hour(BDPS$FRAME), min = min(BDPS$FRAME), sec = second(BDPS$FRAME))
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data ETF ECH.xlsx" el archivo que contiene el
#       histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas ETF ECH (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi",  # getActiveDocumentContext
"lubridate")   # makedatetime, year, month,.., second
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"))))
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPS <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPS) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Creacion de columna con fecha y franja horaria
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE),
day = day(BDPS$DATE),
hour = hour(BDPS$FRAME),
min = min(BDPS$FRAME),
sec = second(BDPS$FRAME))
# Creacion de columna con fecha y franja horaria
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE))#,
View(BDPS)
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE))#
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE),
day = day(BDPS$DATE))#
View(BDPS)
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE),
day = day(BDPS$DATE),
hour = hour(BDPS$FRAME))#
View(BDPS)
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE),
day = day(BDPS$DATE),
hour = hour(BDPS$FRAME),
min = min(BDPS$FRAME))#
View(BDPS)
min(BDPS$FRAME[1])
hour(BDPS$FRAME[1])
# Creacion de columna con fecha y franja horaria
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE),
day = day(BDPS$DATE),
hour = hour(BDPS$FRAME),
min = minute(BDPS$FRAME),
sec = second(BDPS$FRAME))
BDPS[,-c("DATE","FRAME")]
BDPS[,-c("BDPS$DATE","BDPS$FRAME")]
BDPS[,-c(BDPS$DATE,BDPS$DATE)]
BDPS[,c("DATE","FRAME")]
BDPS[,c("DATE","FRAME")] <- NULL
BDPS[,-c("DATEFRAME")]
BDPS[,!c("DATEFRAME")]
BDPS[,-"DATEFRAME"]
BDPS[,-c("DATEFRAME")]
BDPS[-c("DATEFRAME")]
BDPS <- c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data ETF ECH.xlsx" el archivo que contiene el
#       histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas ETF ECH (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi",  # getActiveDocumentContext
"lubridate")   # makedatetime, year, month,.., second
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"))))
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPS <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPS) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Reorganizacion de fechas y franjas horarias
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE),
day = day(BDPS$DATE),
hour = hour(BDPS$FRAME),
min = minute(BDPS$FRAME),
sec = second(BDPS$FRAME))
BDPS[,c("DATE","FRAME")] <- NULL
BDPS <- BDPS[,c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
View(BDPS)
BDPS <- BDPS[,c("DATEFRAME",2)]
View(BDPS)
BDPS[,-c(which(names(BDPS)=="HIGH")]
BDPS[,-c(which(names(BDPS)=="HIGH"))]
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data ETF ECH.xlsx" el archivo que contiene el
#       histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas ETF ECH (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi",  # getActiveDocumentContext
"lubridate")   # makedatetime, year, month,.., second
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"))))
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPS <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPS) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Reorganizacion de fechas y franjas horarias
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE),
day = day(BDPS$DATE),
hour = hour(BDPS$FRAME),
min = minute(BDPS$FRAME),
sec = second(BDPS$FRAME))
BDPS[,c("DATE","FRAME")] <- NULL
###  Estrategia y estadísticas ETF ECH (Réplica Swell)  ###
###                     2021-03-01                      ###
###                     Version 0.0                     ###
###          Authors: Olga Serna / Ivan Serrano         ###
# 0. DESCRIPCIÓN E INSTRUCCIONES ##############################################
# 0.1 Objetivo
# Calcular la señal de la estrategia y sus estadísticas de retorno y riesgo a
# partir de serie histórica OHLC (apertura, máximo, mínimo y cierre) y un árbol
# de decisión de estrategia.
# 0.2 Supuestos
# 0.2.1 Se realizan operaciones a las que haya lugar después de formación de la
#       vela de mercado para cada franja horaria, teniendo en cuenta el periodo
#       de tiempo permitido de operación definido para cada día, el cual excluye
#       las franjas horarias que se consideran de baja liquidez.
# 0.2.2 Todas las franjas horarias se tienen en cuenta para el cálculo de la
#       señal.
# 0.2.3 Se consigue operar en el mercado a los precios de referencia de los
#       umbrales o precios de entrada definidos en el árbol de decisión, con
#       costos transaccionales asociados a un bid-ask spread nulo.
# 0.2.3 No se considera la dinámica de los flujos de capital, pues  no se
#       tienen en cuenta los faltantes o excedentes de efectivo que se pueden
#       presentar al cerrar y abrir posiciones.
# 0.2.4 Para los cálculos de utilidad (pérdida o ganancia en términos
#       monetarios), se tiene en cuenta si la posición es larga o corta.
# 0.2.4 La hora del archivo de insumo OHLC corresponde a la de Santiago y por
#       lo tanto el código considera las fluctuaciones horarias con relación
#       a la hora del este de Estados Unidos.
# 0.3 Instrucciones
# 0.3.1 Guardar con el nombre "Data ETF ECH.xlsx" el archivo que contiene el
#       histórico de precios OHLC en la misma ruta donde se encuentra ubicado
#       el código "Estrategia y estadísticas ETF ECH (Réplica Swell).R". Se
#       debe verificar que el archivo solo contenga la información mencionada y
#       nada adicional (incluso celdas borradas).
# 1. PAQUETES Y CONFIGURACIONES ###############################################
# Paquetes
Libraries <- c("readxl",      # read_excel
"rstudioapi",  # getActiveDocumentContext
"lubridate")   # makedatetime, year, month,.., second
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"))))
}
# Ubicación archivos de origen
BaseDirPath = dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
#Plantilla gráficos
# 2. LECTURA Y PREPARACIÓN DE DATOS ###########################################
# Lectura de archivo histórico de precios
ArchivoCargue <- "Data ETF ECH.xlsx"
BDPS <- read_excel(ArchivoCargue, sheet = "DATOS ECH")
# Asignación de títulos a las columnas
colnames(BDPS) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
# Reorganizacion de fechas y franjas horarias
BDPS$DATEFRAME <- make_datetime(year = year(BDPS$DATE),
month = month(BDPS$DATE),
day = day(BDPS$DATE),
hour = hour(BDPS$FRAME),
min = minute(BDPS$FRAME),
sec = second(BDPS$FRAME))
BDPS[,c("DATE","FRAME")] <- NULL
BDPS <- BDPS[,c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
View(BDPS)
