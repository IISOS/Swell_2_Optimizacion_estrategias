NA,
BD$TP_MOVIL_PA
)
BD$TP_MOVIL_PA <- ave(BD$TP_MOVIL_PA,
cumsum(is.na(BD$TP_MOVIL_PA) != c(T,is.na(BD$TP_MOVIL_PA)[1:N-1])), # Vector de grupos (se construye haciendo el cumsum de un veCtor con VERDADERO en puntos de inicio)
FUN = cummax
)
# Cálculo de umbrales de la razón Pmax/PE o Pmin/PE para las zonas de ganancia/pérdida
SL_FIJO_PmaxPmin <- Zona_PG_Cierre$MaximoRazon[Zona_PG_Cierre$Zona_PG == "Stop Loss"]
BD$SL_MOVIL_PmaxPmin <- shift(ifelse(BD$DECISION_SIF == "HOLD POSITION",
((1 + BD$PmaxPmin_PE) * (1 + SL_FIJO_PmaxPmin) - 1),
ifelse(BD$DECISION_SIF == "OPEN" | BD$DECISION_SIF == "CLOSE-OPEN",
SL_FIJO_PmaxPmin,
NA
)
),
n=1, fill=NA
)
BD$SL_MOVIL_PmaxPmin <- ifelse(BD$DECISION_SIF == "CLOSE" | BD$DECISION_SIF == "CLOSE-OPEN",
NA,
BD$SL_MOVIL_PmaxPmin
)
BD$SL_MOVIL_PmaxPmin <- ave(BD$SL_MOVIL_PmaxPmin,
cumsum(is.na(BD$SL_MOVIL_PmaxPmin) != c(T,is.na(BD$SL_MOVIL_PmaxPmin)[1:N-1])), # Vector de grupos (se construye haciendo el cumsum de un veCtor con VERDADERO en puntos de inicio)
FUN = cummax
)
TP_FIJO_PmaxPmin <- Zona_PG_Cierre$MinimoRazon[Zona_PG_Cierre$Zona_PG == "Take Profit"]
BD$TP_MOVIL_PmaxPmin <- shift(ifelse(BD$DECISION_SIF == "HOLD POSITION",
((1 + BD$PmaxPmin_PE) * (1 + TP_FIJO_PmaxPmin) - 1),
ifelse(BD$DECISION_SIF == "OPEN" | BD$DECISION_SIF == "CLOSE-OPEN",
TP_FIJO_PmaxPmin,
NA
)
),
n=1, fill=NA
)
BD$TP_MOVIL_PmaxPmin <- ifelse(BD$DECISION_SIF == "CLOSE" | BD$DECISION_SIF == "CLOSE-OPEN",
NA,
BD$TP_MOVIL_PmaxPmin
)
BD$TP_MOVIL_PmaxPmin <- ave(BD$TP_MOVIL_PmaxPmin,
cumsum(is.na(BD$TP_MOVIL_PmaxPmin) != c(T,is.na(BD$TP_MOVIL_PmaxPmin)[1:N-1])), # Vector de grupos (se construye haciendo el cumsum de un veCtor con VERDADERO en puntos de inicio)
FUN = cummax
)
# Asignación de zonas de ganancia/pérdida para cierres de posiciones
BD$ZONA_PG_PA <- ifelse(BD$PA_PE <= BD$SL_MOVIL_PA,
"Stop Loss",
ifelse(BD$PA_PE > BD$SL_MOVIL_PA & BD$PA_PE <= 0,
"Low Loss",
ifelse(BD$PA_PE > 0 & BD$PA_PE <= BD$TP_MOVIL_PA,
"Low Profit",
"Take Profit"
)
)
)
BD$ZONA_PG_PmaxPmin <- ifelse(BD$PmaxPmin_PE <= BD$SL_MOVIL_PmaxPmin,
"Stop Loss",
ifelse(BD$PmaxPmin_PE > BD$SL_MOVIL_PmaxPmin & BD$PmaxPmin_PE <= 0,
"Low Loss",
ifelse(BD$PmaxPmin_PE > 0 & BD$PmaxPmin_PE <= BD$TP_MOVIL_PmaxPmin,
"Low Profit",
"Take Profit"
)
)
)
BD$CIERRE_PA <- -Zona_PG_Cierre$Cierre[match(BD$ZONA_PG_PA, Zona_PG_Cierre$Zona_PG)]
BD$CIERRE_PmaxPmin <- -Zona_PG_Cierre$Cierre[match(BD$ZONA_PG_PmaxPmin, Zona_PG_Cierre$Zona_PG)]
BD$CIERREPARCIAL <- ifelse((BD$CIERRE_PA + BD$CIERRE_PmaxPmin) < -1,
-1,
(BD$CIERRE_PA + BD$CIERRE_PmaxPmin)
)
# Acumulado irrestricto de cierres parciales (SIN ajuste por valores menores a -1)
BD$CIERRE_ACUM <- ave(BD$CIERREPARCIAL,
cumsum(is.na(BD$CIERREPARCIAL) != c(T,is.na(BD$CIERREPARCIAL)[1:N-1])), # Vector de grupos (se construye haciendo el cumsum de un vector con VERDADERO en puntos de inicio)
FUN = cumsum
)
# Acumulado acotado de cierres parciales (CON ajuste por valores menores a -1)
BD$CIERRE_ACUM <- ifelse(BD$CIERRE_ACUM < -1,
-1,
BD$CIERRE_ACUM
)
BD$POS_ABIERTA <- ifelse(BD$DECISION_SIF == "OPEN",
1, # Si decisión es "OPEN"
ifelse(BD$DECISION_SIF == "CLOSE-OPEN", # Si decisiÓn NO es "OPEN"
1, # Si decisiÓn es "CLOSE-OPEN"
ifelse(BD$DECISION_SIF == "CLOSE", # Si decisiÓn NO es "OPEN" ni "CLOSE-OPEN"
0, # Si decisiÓn es "CLOSE"
ifelse(BD$DECISION_SIF == "HOLD POSITION", # Si decisiÓn es NO "OPEN" ni "CLOSE-OPEN" ni "CLOSE"
1 + BD$CIERRE_ACUM, # Si decisiÓn es "HOLD POSITION"
0 # Si decisiÓn es "NO POSITION"
)
)
)
)
BD$DECISION_FINAL <- ifelse(BD$DECISION_SIF == "HOLD POSITION",
ifelse(BD$POS_ABIERTA == 0,
ifelse(shift(BD$POS_ABIERTA, n=1, fill=NA) > 0,
"CLOSE",
"NO POSITION"
),
BD$DECISION_SIF # Es decir, "HOLD POSITION"
),
ifelse(BD$DECISION_SIF == "CLOSE",
ifelse(shift(BD$POS_ABIERTA == 0, n=1, fill=NA),
"NO POSITION",
BD$DECISION_SIF # Es decir, "CLOSE".
),
ifelse(BD$DECISION_SIF == "CLOSE-OPEN",
ifelse(shift(BD$POS_ABIERTA == 0, n=1, fill=NA),
"OPEN",
BD$DECISION_SIF # Es decir, "CLOSE-OPEN".
),
BD$DECISION_SIF # Es decir, "OPEN" o "NO POSITION"
)
)
)
#Resultados
return(BD)
}
ListaBD <- lapply(ListaBD, FunDIF) # Complementa lista de BDs CON DIF
# Asignación de PENTRADA, PCIERRE y signos de cortos/largos con base en decisión
# de inversión final (DIF)
Fun_PE_PC_SENALSIGNO_SL_TP <- function(BD) {
# Asignación de precio de entrada (PENTRADA)
BD$PENTRADA <- ifelse((BD$DECISION_FINAL == "OPEN"),
BD$CLOSE,
ifelse((BD$DECISION_FINAL == "CLOSE-OPEN"),
BD$CLOSE,
NA
)
)
BD$PENTRADA <- na.locf(BD$PENTRADA, na.rm = FALSE) # Arrastre donde no es OPEN o CLOSE-OPEN
ID_CLOSEOPEN <- which(BD$DECISION_FINAL=="CLOSE-OPEN")
BD$PENTRADA[ID_CLOSEOPEN] <- shift(BD$PENTRADA, n=1, fill=NA)[ID_CLOSEOPEN] # Para CLOSE-OPEN se deja el PA de la posición cerrada.
BD$PENTRADA[which(BD$DECISION_FINAL == "NO POSITION")] <- NA # No aplica si no hay posición
# Asignación de precio de cierre (PCIERRE)
BD$PCIERRE <- ifelse((BD$DECISION_FINAL == "CLOSE"),
BD$CLOSE,
ifelse((BD$DECISION_FINAL == "CLOSE-OPEN"),
BD$CLOSE,
NA
)
)
# Asignación de signo según señal para identificar posiciones largas y cortas
BD$SENALSIGNO <- ifelse((BD$DECISION_FINAL == "OPEN") | (BD$DECISION_FINAL == "HOLD POSITION"),
ifelse((BD$SIF == "BUY"),
1,
-1
),
ifelse((BD$DECISION_FINAL == "CLOSE") | (BD$DECISION_FINAL == "CLOSE-OPEN"),
ifelse((shift(BD$SIF, n=1, fill=NA) == "BUY"),
1,
-1
),
0 # Cuando DECISION es "NO POSITION" o NA
)
)
BD$SENALSIGNO <- ifelse(is.na(BD$DECISION_FINAL), 0, BD$SENALSIGNO)
#Resultados
return(BD)
}
ListaBD <- lapply(ListaBD, Fun_PE_PC_SENALSIGNO_SL_TP) # Reconstruye lista de BDs con SL y TP
# 12.2. CÁLCULO POSICIÓN Y VALORACIÓN [PROPUESTA] #########################
# Cargue de parámetros de negociación (BAS y comisión)
BAS <- as.numeric(read_excel(ArchivoInsumos,
sheet = "Insumos",
range = "B10",
col_names = FALSE
)
)
Comision <- as.numeric(read_excel(ArchivoInsumos,
sheet = "Insumos",
range = "B11",
col_names = FALSE
)
)
# Cálculo de posición y valoración del portafolio suponiendo solo posiciones largas
Fun_POS_VAL_PORT <- function(BD) {
# Valor de fondeo inicial
FONDEOINICIAL <- 100
# Columnas para precio de entrada (PENTRADA), volumen y valor de posición inicial
# y final (VOL_POSINICIAL, VOL_POSFINAL, VAL_POSINICIAL y VAL_POSFINAL), volumen
# y valor de compras y ventas (VOL_COMPRAS, VOL_VENTAS, VAL_COMPRAS y VAL_VENTAS).
# También se definen las variables de entrada conocidas, correspondientes a la
# primera FH de la serie.
BD$VOL_POSAPERTURA <- c(0, rep(NA, (N-1)))
BD$VOL_COMPRAS <- c(0, rep(NA, (N-1)))
BD$VAL_COMPRAS <- c(0, rep(NA, (N-1)))
BD$VOL_VENTAS <- c(0, rep(NA, (N-1)))
BD$VAL_VENTAS <- c(0, rep(NA, (N-1)))
BD$VOL_POSFINAL <- c(0, rep(NA, (N-1)))
BD$VAL_POSFINAL <- c(0, rep(NA, (N-1)))
BD$EFECTIVO <- c(FONDEOINICIAL, rep(NA, (N-1)))
BD$VAL_PORT <- c((BD$VOL_POSFINAL[1]*BD$CLOSE[1]+BD$EFECTIVO[1]), rep(NA, (N-1)))
BD$COMISION <- c(0, rep(NA, (N-1)))
for (t in 2:N) {
#BD$VOL_POSINICIAL[t] <- BD$VOL_POSFINAL[t-1]
#BD$VAL_POSINICIAL[t] <- BD$VAL_POSFINAL[t-1]
if (BD$DECISION_FINAL[t] == "OPEN") { # Si decisiÓn es "OPEN"
BD$VAL_VENTAS[t] <- 0
BD$VOL_VENTAS[t] <- BD$VAL_VENTAS[t] / BD$PENTRADA[t] # 0
BD$VAL_COMPRAS[t] <- BD$EFECTIVO[t-1] * (1 - Comision)
BD$VOL_COMPRAS[t] <- BD$VAL_COMPRAS[t] / (BD$PENTRADA[t] * (1 + BAS))
BD$COMISION[t] <- BD$EFECTIVO[t-1] * Comision
} else { # Si decisiÓn NO es "OPEN"
if (BD$DECISION_FINAL[t] == "CLOSE-OPEN") { # Si decisiÓn es "CLOSE-OPEN"
BD$VOL_VENTAS[t] <- BD$VOL_POSFINAL[t-1]
BD$VAL_VENTAS[t] <- (BD$VOL_VENTAS[t] * (BD$PCIERRE[t] * (1 - BAS)))
BD$COMISION[t] <- BD$VAL_VENTAS[t] * Comision
BD$VAL_COMPRAS[t] <- (BD$VAL_VENTAS[t] * (1 - Comision)) * (1 - Comision)
BD$VOL_COMPRAS[t] <- BD$VAL_COMPRAS[t] / (BD$CLOSE[t] * (1 + BAS))
BD$COMISION[t] <- BD$COMISION[t] + ((BD$VAL_VENTAS[t] * (1 - Comision)) * Comision)
} else { # Si decisiÓn NO es "OPEN" ni "CLOSE-OPEN"
if (BD$DECISION_FINAL[t] == "CLOSE") { # Si decisiÓn es "CLOSE"
BD$VOL_VENTAS[t] <- BD$VOL_POSFINAL[t-1]
BD$VAL_VENTAS[t] <- (BD$VOL_VENTAS[t] * (BD$PCIERRE[t] * (1 - BAS)))
BD$COMISION[t] <- BD$VAL_VENTAS[t] * Comision
BD$VAL_COMPRAS[t] <- 0
BD$VOL_COMPRAS[t] <- 0
} else { # Si decisiÓn es NO "OPEN" ni "CLOSE-OPEN" ni "CLOSE"
if (BD$DECISION_FINAL[t] == "HOLD POSITION") { # Si decisiÓn es "HOLD POSITION"
BD$VOL_VENTAS[t] <- 0
BD$VAL_VENTAS[t] <- 0
BD$VAL_COMPRAS[t] <- 0
BD$VOL_COMPRAS[t] <- 0
BD$COMISION[t] <- 0
} else { # Si decisiÓn es "NO POSITION"
BD$VOL_VENTAS[t] <- 0
BD$VAL_VENTAS[t] <- 0
BD$VAL_COMPRAS[t] <- 0
BD$VOL_COMPRAS[t] <- 0
BD$COMISION[t] <- 0
}
}
}
}
# Siempre se calcula la posición final y la valoración del efectivo y del portafolio:
BD$VOL_POSFINAL[t] <- BD$VOL_POSFINAL[t-1] +
BD$VOL_COMPRAS[t] -
BD$VOL_VENTAS[t]
BD$VAL_POSFINAL[t] <- BD$VOL_POSFINAL[t] * BD$CLOSE[t]
BD$EFECTIVO[t] <- round((BD$EFECTIVO[t-1] + BD$VAL_VENTAS[t] - BD$VAL_COMPRAS[t] - BD$COMISION[t]),
7)
BD$VAL_PORT[t] <- BD$VAL_POSFINAL[t] + BD$EFECTIVO[t]
}
#Resultados
return(BD)
}
StartT <- Sys.time()
ListaBD <- lapply(ListaBD, Fun_POS_VAL_PORT)
EndT <- Sys.time()
TElapsed <- EndT - StartT
# 12.3. CÁLCULO ESTADÍSTICAS RETORNO Y RIESGO [PROPUESTA] ###################
# Variables y parámetros para los cálculos - Número de franjas horarias por día
NFHD <- as.numeric(read_excel(ArchivoInsumos,
sheet = "Insumos",
range = "B2",
col_names = FALSE
)
)
# Variables y parámetros para los cálculos - Nivel de significancia deseado
Significancia <- as.numeric(read_excel(ArchivoInsumos,
sheet = "Insumos",
range = "B18",
col_names = FALSE
)
)
# Variables y parámetros para los cálculos - Ventana móvil para volatilidades
VentanaMovilVol_Dias <- as.numeric(read_excel(ArchivoInsumos,
sheet = "Insumos",
range = "B17",
col_names = FALSE
)
)
VentanaMovilVol_FH <- VentanaMovilVol_Dias * (NFHD - NFHC)
# Variables y parámetros para los cálculos - BD activo libre de riesgo
BDLibreRiesgo <- read_excel(ArchivoCargue, sheet = "OHLC libre de riesgo")
colnames(BDLibreRiesgo) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
BDLibreRiesgo$DATEFRAME <- make_datetime(year = year(BDLibreRiesgo$DATE),
month = month(BDLibreRiesgo$DATE),
day = day(BDLibreRiesgo$DATE),
hour = hour(BDLibreRiesgo$FRAME),
min = minute(BDLibreRiesgo$FRAME),
sec = second(BDLibreRiesgo$FRAME)
)
BDLibreRiesgo[,c("DATE","FRAME")] <- NULL
BDLibreRiesgo <- BDLibreRiesgo[,c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
BDLibreRiesgo <- BDLibreRiesgo[order(BDLibreRiesgo$DATEFRAME),]
NLR <- length(BDLibreRiesgo$DATEFRAME)
# Función para el cálculo de estadísticas de riesgo y retorno
Fun_Est_Riesgo_Retorno <- function(BD) {
# Columnas
BD$RET <- c(0, rep(NA, (N-1)))
BD$RET_ACUM <- c(0, rep(NA, (N-1)))
BD$VAL_PORT_ACUM_B100 <- c(100, rep(NA, (N-1)))
BD$PERD_ACUM <- c(0, rep(NA, (N-1)))
BD$MAX_PERD_ACUM <- c(0, rep(NA, (N-1)))
# Retorno de cada FH
BD$RET <- (((BD$VAL_PORT + BD$COMISION) / c(0, BD$VAL_PORT[1:N-1]) - 1)) * c(NA, BD$SENALSIGNO[1:N-1])
# Retorno acumulado y acumulado base 100
BD$RET_ACUM <- c(NA, (cumprod(1 + BD$RET[2:N]) - 1))
BD$VAL_PORT_ACUM_B100 <- (BD$RET_ACUM + 1) * 100
# Pérdida acumulada y máxima pérdida acumulada
BD$PERD_ACUM <- c(NA, (BD$VAL_PORT_ACUM_B100[2:N]) / (cummax(BD$VAL_PORT_ACUM_B100[2:N])) - 1)
BD$MAX_PERD_ACUM <- c(NA, cummin(BD$PERD_ACUM[2:N]))
# BD diaria
BDRETDAILY <- BD %>% select(DATEFRAME, DATE, RET, MAX_PERD_ACUM) %>%
group_by(DATE) %>%
mutate(RETDAY = (cumprod(1 + na.replace(RET, 0)) - 1)) %>%
top_n(1, DATEFRAME) %>%
select(-DATEFRAME, -RET)
# BD mensual
BDRETMONTHLY <- BD %>% mutate(YEARMONTH = paste0(year(DATE), "-", format(DATE, "%m"))) %>%
select(DATEFRAME, YEARMONTH, RET, MAX_PERD_ACUM) %>%
group_by(YEARMONTH) %>%
mutate(RETMONTH = cumprod(1 + na.replace(RET, 0)) - 1) %>%
top_n(1, DATEFRAME) %>%
select(-DATEFRAME, -RET)
# BD anual
BDRETANNUALY <- BD %>% mutate(YEAR = year(DATEFRAME)) %>%
select(DATEFRAME, YEAR, RET, MAX_PERD_ACUM) %>%
group_by(YEAR) %>%
mutate(RETYEAR = cumprod(1 + na.replace(RET, 0)) - 1) %>%
top_n(1, DATEFRAME)  %>%
select(-DATEFRAME, -RET)
# Estadísticas finales retorno y riesgo
RET_ACUM <- BD$RET_ACUM[N] # Retorno acumulado desde inicio
VAL_PORT_ACUM_B100 <- BD$VAL_PORT_ACUM_B100[N] # Retorno acumulado base 100 desde inicio
RET_ACUM_ANUAL <- (1 + RET_ACUM)^(365*(NFHD-NFHC)/(N-1)) - 1 # Retorno acumulado anualizado desde inicio
MAXPERDACUM <- BD$MAX_PERD_ACUM[N] # Máxima pérdida desde inicio (MDD)
RAA_MPA <- RET_ACUM_ANUAL / -MAXPERDACUM # Retorno anual ajustado por riesgo de pérdida
# Otras estadísticas de riesgo - Volatilidad FH
BD$VolFH <- rollapplyr(data = BD$RET, width = VentanaMovilVol_FH, FUN = sd, fill = NA)
VolFH <- sd(BD$RET, na.rm = TRUE)
# Otras estadísticas de riesgo - Volatilidad diaria
BDRETDAILY$VolD <- rollapplyr(data = BDRETDAILY$RETDAY, width = VentanaMovilVol_Dias, FUN = sd, fill = NA)
VolD <- sd(BDRETDAILY$RETDAY, na.rm = TRUE)
# Otras estadísticas de riesgo - Volatilidad mensual
VolM <- BDRETDAILY %>% mutate(YEARMONTH = paste0(year(DATE), "-", format(DATE, "%m"))) %>%
mutate(VolM = sqrt(20) * VolD) %>%
select(DATE, YEARMONTH, VolM) %>%
group_by(YEARMONTH) %>%
top_n(1, DATE) %>%
select(-DATE)
BDRETMONTHLY$VolM <- VolM$VolM
VolM <- sqrt(20) * VolD
# Otras estadísticas de riesgo - Volatilidad anual
VolA <- BDRETDAILY %>% mutate(YEAR = year(DATE)) %>%
mutate(VolA = sqrt(252) * VolD) %>%
select(DATE, YEAR, VolA) %>%
group_by(YEAR) %>%
top_n(1, DATE)  %>%
select(-DATE)
BDRETANNUALY$VolA <- VolA$VolA
VolA <- sqrt(252) * VolD
# Otras estadísticas de riesgo - Razón de Sharpe (anual)
BDLibreRiesgo$RETLR <- c(0, rep(NA, (NLR-1)))
BDLibreRiesgo$RETLR <- ((BDLibreRiesgo$CLOSE / c(NA, BDLibreRiesgo$CLOSE[1:NLR-1]) - 1))
BDLibreRiesgo <- BDLibreRiesgo[, c("DATEFRAME", "RETLR")]
BD <- BD %>% left_join(BDLibreRiesgo, by = c("DATEFRAME"))
BD$RETLR[is.na(BD$RETLR)] <- 0
BD$RET_ACUM_LR <- c(0, rep(NA, (N-1)))
BD$RET_ACUM_LR <- c(NA, (cumprod(1 + BD$RETLR[2:N]) - 1))
BDRETLRDAILY <- BD %>% select(DATEFRAME, DATE, RETLR) %>%
group_by(DATE) %>%
mutate(RETLRDAY = cumprod(1 + na.replace(RETLR, 0)) - 1) %>%
top_n(1, DATEFRAME) %>%
select(-DATEFRAME, -RETLR)
BDRETDAILY$RETLRDAY <- BDRETLRDAILY$RETLRDAY
RET_PROM_LR_ANUAL <- mean(BDRETDAILY$RETLRDAY) * 30 * 12
RET_PROM_ANUAL <- mean(BDRETDAILY$RETDAY) * 30 * 12
SharpeRAnual <- (RET_PROM_ANUAL - RET_PROM_LR_ANUAL) / VolA
# Otras estadísticas de riesgo - Razón de Sortino (anual)
BD$RETINFOBJ <- ifelse(BD$RET > BD$RETLR, 0, (BD$RET - BD$RETLR))
BD$VolInfObjFH <- rollapplyr(data = BD$RETINFOBJ, width = VentanaMovilVol_FH, FUN = sd, fill = NA)
VolInfObjFH <- sd(BD$RETINFOBJ, na.rm = TRUE)
BDRETDAILY$RETINFOBJ <- ifelse(BDRETDAILY$RETDAY > BDRETDAILY$RETLRDAY,
0,
(BDRETDAILY$RETDAY - BDRETDAILY$RETLRDAY)
)
BDRETDAILY$VolInfObjD <- rollapplyr(data = BDRETDAILY$RETINFOBJ, width = VentanaMovilVol_Dias, FUN = sd, fill = NA)
VolInfObjD <- sd(BDRETDAILY$RETINFOBJ, na.rm = TRUE)
VolInfObjM <- BDRETDAILY %>% mutate(YEARMONTH = paste0(year(DATE), "-", format(DATE, "%m"))) %>%
mutate(VolInfObjM = sqrt(20) * VolInfObjD) %>%
select(DATE, YEARMONTH, VolInfObjM) %>%
group_by(YEARMONTH) %>%
top_n(1, DATE) %>%
select(-DATE)
BDRETMONTHLY$VolInfObjM <- VolInfObjM$VolInfObjM
VolInfObjM <- sqrt(20) * VolInfObjD
VolInfObjA <- BDRETDAILY %>% mutate(YEAR = year(DATE)) %>%
mutate(VolInfObjA = sqrt(252) * VolInfObjD) %>%
select(DATE, YEAR, VolInfObjA) %>%
group_by(YEAR) %>%
top_n(1, DATE)  %>%
select(-DATE)
BDRETANNUALY$VolInfObjA <- VolInfObjA$VolInfObjA
VolInfObjA <- sqrt(252) * VolInfObjD
RET_PROM_OBJ_ANUAL <- RET_PROM_LR_ANUAL
SortinoRAnual <- (RET_PROM_ANUAL - RET_PROM_OBJ_ANUAL) / VolInfObjA
# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (diarios)
HVaRD <- quantile(x = BDRETDAILY$RETDAY, probs = Significancia)
HCVaRD <- mean(BDRETDAILY$RETDAY[which(BDRETDAILY$RETDAY < HVaRD)])
# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (mensuales)
HVaRM <- quantile(x = BDRETMONTHLY$RETMONTH, probs = Significancia)
HCVaRM <- mean(BDRETMONTHLY$RETMONTH[which(BDRETMONTHLY$RETMONTH < HVaRM)])
# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (anuales)
BDRETMONTHLY$RET12MONTHS <- t(last(t(rollapplyr(data = (1+BDRETMONTHLY$RETMONTH),
width = 12,
FUN = cumprod,
fill = NA
)
)
)
) -
1
HVaRA <- quantile(x = BDRETMONTHLY$RET12MONTHS, probs = Significancia, na.rm = TRUE)
HCVaRA <- mean(BDRETMONTHLY$RET12MONTHS[which(BDRETMONTHLY$RET12MONTHS < HVaRA)], na.rm = TRUE)
#PVaRM <-
#PCVaRM <-
#PVaRA <-
#PCVaRA <-
#Porcentaje de retornos negativos
#Frecuencia de retornos menores a -1%, -5%, -10%, objetivo (libre riesgo)
#Peor retorno
# Gráfico utilidad acumulada
G_VAL_PORT_ACUM_B100 <- ggplot(BD, aes(x = DATE, y = VAL_PORT_ACUM_B100)) +
geom_line(size = 1) +
ggtitle("Valor portafolio (Base 100)") +
xlab("Fecha") + ylab("Valor (Base 100)") +
expand_limits(x =BD$DATE[1]) +
expand_limits(y = 0) +
PlantillaG
#Resultados
BD_Est_Retorno_Riesgo <- list(BD = BD,
BDRDiario = BDRETDAILY,
BDRMensual = BDRETMONTHLY,
BDRAnual = BDRETANNUALY,
VAlPortAcumB100 = VAL_PORT_ACUM_B100,
RetAcumAnual = RET_ACUM_ANUAL,
MaxPerdAcum = MAXPERDACUM,
RAA_MPA = RAA_MPA,
VolatilidadFH = VolFH,
VolatilidadDiaria = VolD,
VolatilidadMensual = VolM,
VolatilidadAnual = VolA,
RetornoPromedioLRAnual = RET_PROM_LR_ANUAL,
RetornoPromedioAnual = RET_PROM_ANUAL,
RazonSharpeAnual = SharpeRAnual,
VolatilidadInferiorObjetivoFH = VolInfObjFH,
VolatilidadInferiorObjetivoDiaria = VolInfObjD,
VolatilidadInferiorObjetivoMensual = VolInfObjM,
VolatilidadInferiorObjetivoAnual = VolInfObjA,
RetornoPromedioObjetivoAnual = RET_PROM_OBJ_ANUAL,
RazonSortinoAnual = SortinoRAnual,
VaRHistoricoDiario = HVaRD,
CVaRHistoricoDiario = HCVaRD,
VaRHistoricoMensual = HVaRM,
CVaRHistoricoMensual = HCVaRM,
VaRHistoricoAnual = HVaRA,
CVaRHistoricoAnual = HCVaRA,
Graf_ValPortAcumB100 = G_VAL_PORT_ACUM_B100
)
return(BD_Est_Retorno_Riesgo)
}
EstList <- lapply(ListaBD, Fun_Est_Riesgo_Retorno) # Construye lista de listas
names(EstList) <- rownames(Senales)
# 12.4. RESUMEN ESTADÍSTICAS ESTRATEGIAS [PROPUESTA] ########################
# Función para obtención de estadísticas totales de retorno y riesgo de cada estrategia
Fun_R_R_Tot <- function(List) {
R_R <- data.frame(VAlPortAcumB100 = List$VAlPortAcumB100,
RetAcumAnual = List$RetAcumAnual,
MaxPerdAcum = List$MaxPerdAcum,
RAA_MPA = List$RAA_MPA,
VolatilidadFH = List$VolatilidadFH,
VolatilidadDiaria = List$VolatilidadDiaria,
VolatilidadMensual = List$VolatilidadMensual,
VolatilidadAnual = List$VolatilidadAnual,
RetornoPromedioLRAnual = List$RetornoPromedioLRAnual,
RetornoPromedioAnual = List$RetornoPromedioAnual,
RazonSharpeAnual = List$RazonSharpeAnual,
VolatilidadInferiorObjetivoFH = List$VolatilidadInferiorObjetivoFH,
VolatilidadInferiorObjetivoDiaria = List$VolatilidadInferiorObjetivoDiaria,
VolatilidadInferiorObjetivoMensual = List$VolatilidadInferiorObjetivoMensual,
VolatilidadInferiorObjetivoAnual = List$VolatilidadInferiorObjetivoAnual,
RetornoPromedioObjetivoAnual = List$RetornoPromedioObjetivoAnual,
RazonSortinoAnual = List$RazonSortinoAnual,
VaRHistoricoDiario = List$VaRHistoricoDiario,
CVaRHistoricoDiario = List$CVaRHistoricoDiario,
VaRHistoricoMensual = List$VaRHistoricoMensual,
CVaRHistoricoMensual = List$CVaRHistoricoMensual,
VaRHistoricoAnual = List$VaRHistoricoAnual,
CVaRHistoricoAnual = List$CVaRHistoricoAnual
)
return(R_R)
}
# Obtención y exportación de estadísticas retorno y riesgo de cada estrategia
SenalesSwell <- Senales
Senales <- cbind(Senales, t(sapply(EstList, Fun_R_R_Tot)))
# 12.5. ESTRATEGIA ÓPTIMA [PROPUESTA] #######################################
# Identificación estrategia óptima
NEstrategiaOpt <- which.max(Senales$RAA_MPA)
EstrategiaOpt <- rownames(Senales)[NEstrategiaOpt]
paste0("La estrategia óptima es ", EstrategiaOpt)
# 12.6. OBJETIVOS Y RESULTADOS ##############################################
return(list(ListaEst = EstList,
Senales = Senales,
RAA_MPA = Senales$RAA_MPA[NEstrategiaOpt],
EstOpt = EstrategiaOpt
)
)
}
