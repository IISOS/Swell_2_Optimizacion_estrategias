# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (diarios)
HVaRD <- quantile(x = BDRETDAILY$RETDAY, probs = Significancia)
HCVaRD <- mean(BDRETDAILY$RETDAY[which(BDRETDAILY$RETDAY < HVaRD)])
# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (mensuales)
HVaRM <- quantile(x = BDRETMONTHLY$RETMONTH, probs = Significancia)
HCVaRM <- mean(BDRETMONTHLY$RETMONTH[which(BDRETMONTHLY$RETMONTH < HVaRM)])
# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (anuales)
BDRETMONTHLY$RET12MONTHS <- t(last(t(rollapplyr(data = (1+BDRETMONTHLY$RETMONTH),
width = 12,
FUN = cumprod,
fill = NA
)
)
)
) -
1
HVaRA <- quantile(x = BDRETMONTHLY$RET12MONTHS, probs = Significancia, na.rm = TRUE)
HCVaRA <- mean(BDRETMONTHLY$RET12MONTHS[which(BDRETMONTHLY$RET12MONTHS < HVaRA)], na.rm = TRUE)
#PVaRM <-
#PCVaRM <-
#PVaRA <-
#PCVaRA <-
#Porcentaje de retornos negativos
#Frecuencia de retornos menores a -1%, -5%, -10%, objetivo (libre riesgo)
#Peor retorno
# Gráfico utilidad acumulada
G_VAL_PORT_ACUM_B100 <- ggplot(BD, aes(x = DATE, y = VAL_PORT_ACUM_B100)) +
geom_line(size = 1) +
ggtitle("Valor portafolio (Base 100)") +
xlab("Fecha") + ylab("Valor (Base 100)") +
expand_limits(x =BD$DATE[1]) +
expand_limits(y = 0) +
PlantillaG
#Resultados
BD_Est_Retorno_Riesgo <- list(BD = BD,
BDRDiario = BDRETDAILY,
BDRMensual = BDRETMONTHLY,
BDRAnual = BDRETANNUALY,
VAlPortAcumB100 = VAL_PORT_ACUM_B100,
RetAcumAnual = RET_ACUM_ANUAL,
MaxPerdAcum = MAXPERDACUM,
RAA_MPA = RAA_MPA,
VolatilidadFH = VolFH,
VolatilidadDiaria = VolD,
VolatilidadMensual = VolM,
VolatilidadAnual = VolA,
RetornoPromedioLRAnual = RET_PROM_LR_ANUAL,
RetornoPromedioAnual = RET_PROM_ANUAL,
RazonSharpeAnual = SharpeRAnual,
VolatilidadInferiorObjetivoFH = VolInfObjFH,
VolatilidadInferiorObjetivoDiaria = VolInfObjD,
VolatilidadInferiorObjetivoMensual = VolInfObjM,
VolatilidadInferiorObjetivoAnual = VolInfObjA,
RetornoPromedioObjetivoAnual = RET_PROM_OBJ_ANUAL,
RazonSortinoAnual = SortinoRAnual,
VaRHistoricoDiario = HVaRD,
CVaRHistoricoDiario = HCVaRD,
VaRHistoricoMensual = HVaRM,
CVaRHistoricoMensual = HCVaRM,
VaRHistoricoAnual = HVaRA,
CVaRHistoricoAnual = HCVaRA,
Graf_ValPortAcumB100 = G_VAL_PORT_ACUM_B100
)
return(BD_Est_Retorno_Riesgo)
}
BDPSList <- lapply(BDPSList, Fun_Est_Riesgo_Retorno) # Construye lista de listas
names(BDPSList) <- rownames(Senales)
# 14. RESUMEN ESTADÍSTICAS ESTRATEGIAS [PROPUESTA] ############################
# Función para obtención de estadísticas totales de retorno y riesgo de cada estrategia
Fun_R_R_Tot <- function(List) {
R_R <- data.frame(VAlPortAcumB100 = List$VAlPortAcumB100,
RetAcumAnual = List$RetAcumAnual,
MaxPerdAcum = List$MaxPerdAcum,
RAA_MPA = List$RAA_MPA,
VolatilidadFH = List$VolatilidadFH,
VolatilidadDiaria = List$VolatilidadDiaria,
VolatilidadMensual = List$VolatilidadMensual,
VolatilidadAnual = List$VolatilidadAnual,
RetornoPromedioLRAnual = List$RetornoPromedioLRAnual,
RetornoPromedioAnual = List$RetornoPromedioAnual,
RazonSharpeAnual = List$RazonSharpeAnual,
VolatilidadInferiorObjetivoFH = List$VolatilidadInferiorObjetivoFH,
VolatilidadInferiorObjetivoDiaria = List$VolatilidadInferiorObjetivoDiaria,
VolatilidadInferiorObjetivoMensual = List$VolatilidadInferiorObjetivoMensual,
VolatilidadInferiorObjetivoAnual = List$VolatilidadInferiorObjetivoAnual,
RetornoPromedioObjetivoAnual = List$RetornoPromedioObjetivoAnual,
RazonSortinoAnual = List$RazonSortinoAnual,
VaRHistoricoDiario = List$VaRHistoricoDiario,
CVaRHistoricoDiario = List$CVaRHistoricoDiario,
VaRHistoricoMensual = List$VaRHistoricoMensual,
CVaRHistoricoMensual = List$CVaRHistoricoMensual,
VaRHistoricoAnual = List$VaRHistoricoAnual,
CVaRHistoricoAnual = List$CVaRHistoricoAnual
)
return(R_R)
}
# Obtención y exportación de estadísticas retorno y riesgo de cada estrategia
SenalesSwell <- Senales
Senales <- cbind(Senales, t(sapply(BDPSList, Fun_R_R_Tot)))
Senales$RetAcum <- unlist(Senales$RetAcum)
Senales$ValAcumB100 <- unlist(Senales$ValAcumB100)
Senales$MaxPerdAcum <- unlist(Senales$MaxPerdAcum)
Senales$RAA_MPA <- unlist(Senales$RAA_MPA)
Senales$RazonSharpeAnual <- unlist(Senales$RazonSharpeAnual)
Senales$RazonSortinoAnual <- unlist(Senales$RazonSortinoAnual)
# Gráfico RetAcum/MDD por estrategia
G_RetAcum_MDD <- ggplot(Senales, aes(x = rownames(Senales), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD por estrategia") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD,
filename = "Ret.Acum_MDD por estrategia.png",
scale = 2
)
# Gráfico RetAcum/MDD para estrategias por encima del promedio
Estrategias_RAA_MPA_Mayores_Promedio <-  Senales %>% filter(RAA_MPA > mean(RAA_MPA))
G_RetAcum_MDD_MayMed <- ggplot(Estrategias_RAA_MPA_Mayores_Promedio,
aes(x = reorder(rownames(Estrategias_RAA_MPA_Mayores_Promedio), RAA_MPA), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD para estrategias por encima del promedio") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD_MayMed)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD_MayMed,
filename = "Ret.Acum_MDD para estrategias por encima del promedio.png",
scale = 2
)
# Gráfico RetAcum/MDD para estrategias por encima del objetivo
RA_MDD_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "RA_MDD_Objetivo",
col_names = FALSE
)
)
Estrategias_RAA_MPA_Mayores_Objetivo <-  Senales %>% filter(RAA_MPA > RA_MDD_Objetivo)
G_RetAcum_MDD_MayObj <- ggplot(Estrategias_RAA_MPA_Mayores_Objetivo,
aes(x = reorder(rownames(Estrategias_RAA_MPA_Mayores_Objetivo), RAA_MPA), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD para estrategias por encima del objetivo") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD_MayObj)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD_MayObj,
filename = "Ret.Acum_MDD para estrategias por encima del objetivo.png",
scale = 2
)
# Gráfico razón de Sharpe por estrategia
G_SharpeR <- ggplot(Senales, aes(x = rownames(Senales), y = RazonSharpeAnual)) +
geom_col() +
ggtitle("Razón de Sharpe por estrategia") +
xlab("Estrategia") + ylab("Razón de Sharpe") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_SharpeR)
ggsave(path = BaseDirPath,
plot = G_SharpeR,
filename = "Razón de Sharpe por estrategia.png",
scale = 2
)
# Gráfico Razón de Sharpe para estrategias por encima del promedio
Estrategias_Sharpe_Mayores_Promedio <-  Senales %>% filter(RazonSharpeAnual > mean(RazonSharpeAnual))
G_Sharpe_MayMed <- ggplot(Estrategias_Sharpe_Mayores_Promedio,
aes(x = reorder(rownames(Estrategias_Sharpe_Mayores_Promedio), RazonSharpeAnual), y = RazonSharpeAnual)) +
geom_col() +
ggtitle("Razón de Sharpe para estrategias por encima del promedio") +
xlab("Estrategia") + ylab("Razón de Sharpe") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_Sharpe_MayMed)
ggsave(path = BaseDirPath,
plot = G_Sharpe_MayMed,
filename = "Razón de Sharpe para estrategias por encima del promedio.png",
scale = 2
)
# Gráfico Razón de Sharpe para estrategias por encima del objetivo
Sharpe_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "Sharpe_Objetivo",
col_names = FALSE
)
)
Estrategias_Sharpe_Mayores_Objetivo <-  Senales %>% filter(RazonSharpeAnual > Sharpe_Objetivo)
G_Sharpe_MayObj <- ggplot(Estrategias_Sharpe_Mayores_Objetivo,
aes(x = reorder(rownames(Estrategias_Sharpe_Mayores_Objetivo), RazonSharpeAnual), y = RazonSharpeAnual)) +
geom_col() +
ggtitle("Razón de Sharpe para estrategias por encima del objetivo") +
xlab("Estrategia") + ylab("Razón de Sharpe") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_Sharpe_MayObj)
ggsave(path = BaseDirPath,
plot = G_Sharpe_MayObj,
filename = "Razón de Sharpe para estrategias por encima del objetivo.png",
scale = 2
)
# Gráfico Razón de Sortino por estrategia
G_SortinoR <- ggplot(Senales, aes(x = rownames(Senales), y = RazonSortinoAnual)) +
geom_col() +
ggtitle("Razón de Sortino por estrategia") +
xlab("Estrategia") + ylab("Razón de Sortino") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_SortinoR)
ggsave(path = BaseDirPath,
plot = G_SortinoR,
filename = "Razón de Sortino por estrategia.png",
scale = 2
)
# Gráfico Razón de Sortino para estrategias por encima del promedio
Estrategias_Sortino_Mayores_Media <-  Senales %>% filter(RazonSortinoAnual > mean(RazonSortinoAnual))
G_Sortino_MayMed <- ggplot(Estrategias_Sortino_Mayores_Media,
aes(x = reorder(rownames(Estrategias_Sortino_Mayores_Media), RazonSortinoAnual), y = RazonSortinoAnual)) +
geom_col() +
ggtitle("Razón de Sortino para estrategias por encima del promedio") +
xlab("Estrategia") + ylab("Razón de Sortino") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_Sortino_MayMed)
ggsave(path = BaseDirPath,
plot = G_Sortino_MayMed,
filename = "Razón de Sortino para estrategias por encima del promedio.png",
scale = 2
)
# Gráfico Razón de Sortino para estrategias por encima del objetivo
Sortino_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "Sortino_Objetivo",
col_names = FALSE
)
)
Estrategias_Sortino_Mayores_Objetivo <-  Senales %>% filter(RazonSortinoAnual > Sortino_Objetivo)
G_Sortino_MayObj <- ggplot(Estrategias_Sortino_Mayores_Objetivo,
aes(x = reorder(rownames(Estrategias_Sortino_Mayores_Objetivo), RazonSortinoAnual), y = RazonSortinoAnual)) +
geom_col() +
ggtitle("Razón de Sortino para estrategias por encima del objetivo") +
xlab("Estrategia") + ylab("Razón de Sortino") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_Sortino_MayObj)
ggsave(path = BaseDirPath,
plot = G_Sortino_MayObj,
filename = "Razón de Sortino para estrategias por encima del objetivo.png",
scale = 2
)
# 15. ESTRATEGIA ÓPTIMA [PROPUESTA] ###########################################
# Identificación estrategia óptima
NEstrategiaOpt <- which.max(Senales$RAA_MPA)
EstrategiaOpt <- rownames(Senales)[NEstrategiaOpt]
paste0("La estrategia óptima es ", EstrategiaOpt)
# Visualización y exportación BD estrategia óptima
View(BDPSList[[EstrategiaOpt]]$BD)
ArchivoResultadosOpt <- createWorkbook()
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "Senales")
writeData(wb = ArchivoResultadosOpt, sheet = "Senales", x = Senales)
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "BDI")
writeData(wb = ArchivoResultadosOpt, sheet = "BDI", x = BDPSList[[EstrategiaOpt]]$BD)
# Visualización y exportación gráfico valor portafolio estrategia óptima
Graf_ValPortAcumB100 <- BDPSList[[EstrategiaOpt]]$Graf_ValPortAcumB100 +
ggtitle(paste0("Valor portafolio estrategia ", EstrategiaOpt, " (Base 100)"))
print(Graf_ValPortAcumB100)
ggsave(path = BaseDirPath,
plot = Graf_ValPortAcumB100,
filename = "Valor portafolio estrategia.png",
scale = 2
)
# Visualización y exportación de estadísticas de retorno y riesgo de estrategia óptima
View(BDPSList[[EstrategiaOpt]]$BDRDiario)
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "RetornosDiarios")
writeData(wb = ArchivoResultadosOpt, sheet = "RetornosDiarios", x = BDPSList[[EstrategiaOpt]]$BDRDiario)
View(BDPSList[[EstrategiaOpt]]$BDRMensual)
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "RetornosMensuales")
writeData(wb = ArchivoResultadosOpt, sheet = "RetornosMensuales", x = BDPSList[[EstrategiaOpt]]$BDRMensual)
View(BDPSList[[EstrategiaOpt]]$BDRAnual)
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "RetornosAnuales")
writeData(wb = ArchivoResultadosOpt, sheet = "RetornosAnuales", x = BDPSList[[EstrategiaOpt]]$BDRAnual)
Nombre_BD_EstrategiaOpt <- Senales$NombreBD[NEstrategiaOpt]
NombreArchivoResultadosOpt <- paste0(Nombre_BD_EstrategiaOpt, "_Propuesta.xlsx")
saveWorkbook(wb = ArchivoResultadosOpt,
file = NombreArchivoResultadosOpt,
overwrite = TRUE
)
# 16. ESTRATEGIAS ADICIONALES [PROPUESTA] #####################################
# Para visualizar la información y estadísticas de una estrategia en particular,
# a continuación asigne a la variable "Estrategia" la cambinación deseada de
# fractales intradiario y de referencia con el formato "I#R#". Por ejemplo, para
# el fractal intradiario 2 y el fractal intradiario de referencia 8 use "I2R8":
# Identificación estrategia seleccionada
EstrategiaSel <- "I5R9"
NEstrategiaSel <- which(rownames(Senales) == EstrategiaSel)
paste0("La estrategia seleccionada es ", EstrategiaSel)
# Visualización y exportación BD estrategia seleccionada
View(BDPSList[[EstrategiaSel]]$BD)
ArchivoResultadosSel <- createWorkbook()
addWorksheet(wb = ArchivoResultadosSel, sheetName = "Senales")
writeData(wb = ArchivoResultadosSel, sheet = "Senales", x = Senales)
addWorksheet(wb = ArchivoResultadosSel, sheetName = "BDI")
writeData(wb = ArchivoResultadosSel, sheet = "BDI", x = BDPSList[[EstrategiaSel]]$BD)
# Visualización y exportación gráfico valor portafolio estrategia seleccionada
Graf_ValPortAcumB100 <- BDPSList[[EstrategiaSel]]$Graf_ValPortAcumB100 +
ggtitle(paste0("Valor portafolio estrategia ", EstrategiaSel, " (Base 100)"))
print(Graf_ValPortAcumB100)
ggsave(path = BaseDirPath,
plot = Graf_ValPortAcumB100,
filename = "Valor portafolio estrategia.png",
scale = 2
)
# Visualización y exportación de estadísticas de retorno y riesgo de estrategia seleccionada
View(BDPSList[[EstrategiaSel]]$BDRDiario)
addWorksheet(wb = ArchivoResultadosSel, sheetName = "RetornosDiarios")
writeData(wb = ArchivoResultadosSel, sheet = "RetornosDiarios", x = BDPSList[[EstrategiaSel]]$BDRDiario)
View(BDPSList[[EstrategiaSel]]$BDRMensual)
addWorksheet(wb = ArchivoResultadosSel, sheetName = "RetornosMensuales")
writeData(wb = ArchivoResultadosSel, sheet = "RetornosMensuales", x = BDPSList[[EstrategiaSel]]$BDRMensual)
View(BDPSList[[EstrategiaSel]]$BDRAnual)
addWorksheet(wb = ArchivoResultadosSel, sheetName = "RetornosAnuales")
writeData(wb = ArchivoResultadosSel, sheet = "RetornosAnuales", x = BDPSList[[EstrategiaSel]]$BDRAnual)
Nombre_BD_EstrategiaSel <- Senales$NombreBD[NEstrategiaSel]
NombreArchivoResultadosSel <- paste0(Nombre_BD_EstrategiaSel, "_Propuesta.xlsx")
saveWorkbook(wb = ArchivoResultadosSel,
file = NombreArchivoResultadosSel,
overwrite = TRUE
)
# 17. CÁLCULO ESTADÍSTICAS RETORNO Y RIESGO [SWELL] ###########################
Fun_Est_U_MPA <- function(BD) {
# Asignación de precio de apertura (PA)
BD$PA <- ifelse((BD$DECISION == "OPEN"),
BD$CLOSE,
ifelse((BD$DECISION == "CLOSE-OPEN"),
BD$CLOSE,
NA
)
)
BD$PA <- na.locf(BD$PA, na.rm = FALSE) # Arrastre donde no es OPEN o CLOSE-OPEN
ID_CLOSEOPEN <- which(BD$DECISION=="CLOSE-OPEN")
BD$PA[ID_CLOSEOPEN] <- shift(BD$PA, n=1, fill=NA)[ID_CLOSEOPEN] # Para CLOSE-OPEN se deja el PA de la posición cerrada.
BD$PA[which(BD$DECISION == "NO POSITION")] <- NA # No aplica si no hay posición
# Asignación de precio de cierre (PC)
BD$PC <- ifelse((BD$DECISION == "CLOSE"),
BD$CLOSE,
ifelse((BD$DECISION == "CLOSE-OPEN"),
BD$CLOSE,
NA
)
)
# Cálculo de utilidad de cada negociación suponiendo solo posiciones largas
BD$UTILIDAD <- BD$PC - BD$PA
# Asignación de signo según señal para identificar posiciones largas y cortas
BD$SENALSIGNO <- ifelse((BD$DECISION == "OPEN") | (BD$DECISION == "HOLD POSITION"),
ifelse((BD$SIF == "BUY"),
1,
-1
),
ifelse((BD$DECISION == "CLOSE") | (BD$DECISION == "CLOSE-OPEN"),
ifelse((shift(BD$SIF, n=1, fill=NA) == "BUY"),
1,
-1
),
NA # Cuando BD$DECISION == "NO POSITION"
)
)
# Cálculo de utilidad de cada negociación según posiciones (largas o cortas)
BD$UTILIDAD <- BD$UTILIDAD * BD$SENALSIGNO
# Cálculo de utilidad acumulada
BD$UTILIDADACUM <- BD$UTILIDAD
BD$UTILIDADACUM[is.na(BD$UTILIDAD)] <- 0
BD$UTILIDADACUM <- cumsum(BD$UTILIDADACUM)
# Cálculo pérdida acumulada
BD$PERDACUM <- BD$UTILIDADACUM - cummax(BD$UTILIDADACUM)
BD$MAXPERDACUM <- cummin(BD$PERDACUM)
# Estadisticas finales utilidad y máxima pérdida acumulada
N <- length(BD$DATEFRAME)
UTILIDADACUM <- BD$UTILIDADACUM[N]
MAXPERDACUM <- BD$MAXPERDACUM[N]
UA_MPA <- UTILIDADACUM / -MAXPERDACUM
# Gráfico utilidad acumulada
G_UTILIDADACUM <- ggplot(BD, aes(x = DATE, y = UTILIDADACUM)) +
geom_line(size = 1) +
ggtitle("Utilidad acumulada estrategia") +
xlab("Fecha") + ylab("Utilidad acumulada") +
expand_limits(x =BD$DATE[1]) +
expand_limits(y = 0) +
PlantillaG
#Resultados
BD_Est_U_MPA <- list(BD, UTILIDADACUM, MAXPERDACUM, UA_MPA, G_UTILIDADACUM)
names(BD_Est_U_MPA) <- c("BDPS", "UtilidadAcum", "MaxPerdAcum", "UA_MPA", "Graf_UtilidadAcum")
return(BD_Est_U_MPA)
}
BDListSwell <- lapply(BDList, Fun_Est_U_MPA)
names(BDListSwell) <- rownames(SenalesSwell)
# 18. RESUMEN ESTADÍSTICAS ESTRATEGIAS [SWELL] ################################
# Función para obtención de estadísticas retorno y riesgo de cada estrategia
Fun_UA_MPA <- function(List) {
UA_MPA <- data.frame(UtilidadAcum = List$UtilidadAcum,
MaxPerdAcum = List$MaxPerdAcum,
UA_MPA = List$UA_MPA
)
return(UA_MPA)
}
# Obtención de estadísticas retorno y riesgo de cada estrategia
SenalesSwell <- cbind(SenalesSwell, t(sapply(BDListSwell, Fun_UA_MPA)))
SenalesSwell$UtilidadAcum <- unlist(SenalesSwell$UtilidadAcum)
SenalesSwell$MaxPerdAcum <- unlist(SenalesSwell$MaxPerdAcum)
SenalesSwell$UA_MPA <- unlist(SenalesSwell$UA_MPA)
rownames(SenalesSwell) <- paste0("I", SenalesSwell$I, "R", SenalesSwell$R)
# Gráfico Utilidad/MDD por estrategia
ggplot(SenalesSwell, aes(x = rownames(SenalesSwell), y = UA_MPA)) +
geom_col() +
ggtitle("Utilidad/MDD por estrategia") +
xlab("Estrategia") + ylab("Utilidad/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
# Gráfico Utilidad/MDD para estrategias por encima del promedio
Est_may_media <-  SenalesSwell %>% filter(UA_MPA > mean(UA_MPA))
ggplot(Est_may_media, aes(x = reorder(rownames(Est_may_media), UA_MPA), y = UA_MPA)) +
geom_col() +
ggtitle("Utilidad/MDD por estrategia") +
xlab("Estrategia") + ylab("Utilidad/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
U_MDD_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "U_MDD_Objetivo",
col_names = FALSE
)
)
Est_may_Sup <-  SenalesSwell %>% filter(UA_MPA > U_MDD_Objetivo)
ggplot(Est_may_Sup, aes(x = reorder(rownames(Est_may_Sup), UA_MPA), y = UA_MPA)) +
geom_col() +
ggtitle("Utilidad/MDD por estrategia") +
xlab("Estrategia") + ylab("Utilidad/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
# 19. ESTRATEGIA ÓPTIMA [SWELL] ###############################################
NEstrategiaOpt <- which.max(SenalesSwell$UA_MPA)
EstrategiaOpt <- rownames(SenalesSwell)[NEstrategiaOpt]
paste0("La estrategia óptima es ", EstrategiaOpt)
View(BDListSwell[[EstrategiaOpt]]$BDPS)
BDListSwell[[EstrategiaOpt]]$Graf_UtilidadAcum +
ggtitle(paste0("Utilidad acumulada estrategia ", EstrategiaOpt))
Nombre_BD_EstrategiaOpt <- SenalesSwell$NombreBD[NEstrategiaOpt]
write.xlsx(x = BDListSwell[[EstrategiaOpt]]$BD,
file = paste0(Nombre_BD_EstrategiaOpt, "_Swell.xlsx"),
colNames = TRUE
)
# 20. ESTRATEGIAS ADICIONALES [SWELL] #########################################
# Para visualizar la información y estadísticas de una estrategia en particular,
# a continuación asigne a la variable "Estrategia" la cambinación deseada de
# fractales intradiario y de referencia con el formato "I#R#". Por ejemplo, para
# el fractal intradiario 2 y el fractal intradiario de referencia 8 use "I2R8":
Estrategia <- "I5R9"
NEstrategia <- which(rownames(SenalesSwell) == Estrategia)
paste0("La estrategia seleccionada es ", Estrategia)
View(BDListSwell[[Estrategia]]$BD)
BDListSwell[[Estrategia]]$Graf_UtilidadAcum +
ggtitle(paste0("Utilidad acumulada estrategia ", Estrategia))
Nombre_BD_Estrategia <- SenalesSwell$NombreBD[NEstrategia]
write.xlsx(x = BDListSwell[[Estrategia]]$BD,
file = paste0(Nombre_BD_Estrategia, "_Swell.xlsx"),
colNames = TRUE
)
# 21. COMPARACIÓN SWELL vs PROPUESTA ##########################################
# Estrategia óptima - Perspectiva Swell vs. Perspectiva propuesta
RetEstOptSwell <- (BDListSwell[[EstrategiaOpt]]$BD$UTILIDAD / shift(BDListSwell[[EstrategiaOpt]]$BD$PA, n=1, fill =NA))
RetEstOptSwell[is.na(RetEstOptSwell)] <- 0
ValPortB100Swell <- cumprod(1 + RetEstOptSwell) * 100
U_Swell_v_Propuesta <- data.frame(DATE = BDListSwell[[EstrategiaOpt]]$BDPS$DATE,
ValPortB100Swell = ValPortB100Swell,
ValPortB100Propuesta = BDPSList[[EstrategiaOpt]]$BD$VAL_PORT_ACUM_B100 )
G_U_Swell_v_Propuesta <- ggplot(U_Swell_v_Propuesta, aes(x = DATE)) +
geom_line(aes(y = ValPortB100Swell, color = "Swell"), size = 1) +
geom_line(aes(y = ValPortB100Propuesta, color = "Propuesta"), size = 1) +
scale_colour_manual("", values = c("Swell"="red", "Propuesta"="darkblue"), breaks=c("Swell","Propuesta")) +
ggtitle("Retorno acumulado estrategia (Base 100)") +
xlab("Fecha") + ylab("Retorno acumulado (Base 100)") +
PlantillaG
print(G_U_Swell_v_Propuesta)
ggsave(path = BaseDirPath,
plot = G_U_Swell_v_Propuesta,
filename = "Retorno acumulado estrategia Swell vs Propuesta (Base 100).png",
scale = 2
)
# XX. OBSERVACIONES ###########################################################
#1 Comision swell
#2 Crear funcion que exporte lo de cada estrategia de un top-10 de estrategias
#3 Correr R/MDD para todas las estrategias y exportar top-10 (anualizar MDD?)
#4 Rankings
##4.1 Calcular estadisticas restantes y dejarlas en "Senales"
##4.3 Generar rankings para cada una de ellas y dejarlos en "Puntajes"
##4.4 Calcular puntajes y dejarlos en "Puntajes"
##4.5 Exportar lo de cada estrategia top-10 de "Puntajes"
#1 Columnas Raul en codigo Swell
# Falta apalancamiento
# Falta SL y TP
# Ajustar instrucciones
save.image("D:/IDSG/Wissen/GitHub/Swell_2_Optimizacion_estrategias/Programas e insumos/Archivos backtesting/Archivos backtesting - Propuesta/SPXL/Estrategia y estadísticas SPXL (propuesto) v0.1.RData")
TElapsed
