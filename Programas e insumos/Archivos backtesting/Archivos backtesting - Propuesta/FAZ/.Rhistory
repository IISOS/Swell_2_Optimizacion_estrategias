load("~/GitHub/Swell_2_Optimizacion_estrategias/Programas e insumos/Archivos backtesting/Archivos backtesting - Propuesta/FAZ/Estrategia y estadísticas FAZ (propuesto) v0.1.RData")
# Paquetes
Libraries <- c("readxl",      # read_excel
"openxlsx",    # createWorkbook, addWorksheet, writeData, saveWorkbook
"rstudioapi",  # getActiveDocumentContext
"lubridate",   # makedatetime, year, month,.., second
"ggplot2",     # ggplot
"data.table",  # Data manipulation (aggregation with . operator)
"zoo",         # rollapplyr, rollapply
"tidyr",       # fill
"dplyr",       # group_by, select, mutate, slice_max
"na.tools"     # na.replace
)
# Instalación/cargue de paquetes
for (L in Libraries) {
eval(parse(text = (paste0("if (!require(",
L,
")) install.packages('",
L,
"')
library(",
L,
")"
)
)
)
)
}
# Ubicación archivos de origen
BaseDirPath <- dirname(getActiveDocumentContext()$path)
setwd(BaseDirPath)
# 13. CÁLCULO ESTADÍSTICAS RETORNO Y RIESGO [PROPUESTA] #######################
# Variables y parámetros para los cálculos - Número de franjas horarias por día
NFHD <- as.numeric(read_excel(ArchivoCargue,
sheet = "N_FH_por_dia",
col_names = FALSE
)
)
# Variables y parámetros para los cálculos - Nivel de significancia deseado
Significancia <- as.numeric(read_excel(ArchivoCargue,
sheet = "Significancia",
col_names = FALSE
)
)
# Variables y parámetros para los cálculos - Ventana móvil para volatilidades
VentanaMovilVol_Dias <- as.numeric(read_excel(ArchivoCargue,
sheet = "VentanaMovilVol",
col_names = FALSE
)
)
VentanaMovilVol_FH <- VentanaMovilVol_Dias*(NFHD - NFHC)
# Variables y parámetros para los cálculos - BD activo libre de riesgo
BDLibreRiesgo <- read_excel(ArchivoCargue, sheet = "OHLC libre de riesgo")
colnames(BDLibreRiesgo) <- c("DATE","FRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")
BDLibreRiesgo$DATEFRAME <- make_datetime(year = year(BDLibreRiesgo$DATE),
month = month(BDLibreRiesgo$DATE),
day = day(BDLibreRiesgo$DATE),
hour = hour(BDLibreRiesgo$FRAME),
min = minute(BDLibreRiesgo$FRAME),
sec = second(BDLibreRiesgo$FRAME)
)
BDLibreRiesgo[,c("DATE","FRAME")] <- NULL
BDLibreRiesgo <- BDLibreRiesgo[,c("DATEFRAME","VOLUME","OPEN","HIGH","LOW","CLOSE")]
BDLibreRiesgo <- BDLibreRiesgo[order(BDLibreRiesgo$DATEFRAME),]
NLR <- length(BDLibreRiesgo$DATEFRAME)
# Función para el cálculo de estadísticas de riesgo y retorno
Fun_Est_Riesgo_Retorno <- function(BD) {
# Columnas
BD$RET <- c(0, rep(NA, (N-1)))
BD$RET_ACUM <- c(0, rep(NA, (N-1)))
BD$VAL_PORT_ACUM_B100 <- c(100, rep(NA, (N-1)))
BD$PERD_ACUM <- c(0, rep(NA, (N-1)))
BD$MAX_PERD_ACUM <- c(0, rep(NA, (N-1)))
# Retorno de cada FH
BD$RET <- ((BD$VAL_PORT / c(0, BD$VAL_PORT[1:N-1]) - 1)) * c(NA, BD$SENALSIGNO[1:N-1])
# Retorno acumulado y acumulado base 100
BD$RET_ACUM <- c(NA, (cumprod(1 + BD$RET[2:N]) - 1))
BD$VAL_PORT_ACUM_B100 <- (BD$RET_ACUM + 1) * 100
# Pérdida acumulada y máxima pérdida acumulada
BD$PERD_ACUM <- c(NA, (BD$VAL_PORT_ACUM_B100[2:N]) / (cummax(BD$VAL_PORT_ACUM_B100[2:N])) - 1)
BD$MAX_PERD_ACUM <- c(NA, cummin(BD$PERD_ACUM[2:N]))
# BD diaria
BDRETDAILY <- BD %>% select(DATEFRAME, DATE, RET, MAX_PERD_ACUM) %>%
group_by(DATE) %>%
mutate(RETDAY = (cumprod(1 + na.replace(RET, 0)) - 1)) %>%
top_n(1, DATEFRAME) %>%
select(-DATEFRAME, -RET)
# BD mensual
BDRETMONTHLY <- BD %>% mutate(YEARMONTH = paste0(year(DATE), "-", format(DATE, "%m"))) %>%
select(DATEFRAME, YEARMONTH, RET, MAX_PERD_ACUM) %>%
group_by(YEARMONTH) %>%
mutate(RETMONTH = cumprod(1 + na.replace(RET, 0)) - 1) %>%
top_n(1, DATEFRAME) %>%
select(-DATEFRAME, -RET)
# BD anual
BDRETANNUALY <- BD %>% mutate(YEAR = year(DATEFRAME)) %>%
select(DATEFRAME, YEAR, RET, MAX_PERD_ACUM) %>%
group_by(YEAR) %>%
mutate(RETYEAR = cumprod(1 + na.replace(RET, 0)) - 1) %>%
top_n(1, DATEFRAME)  %>%
select(-DATEFRAME, -RET)
# Estadísticas finales retorno y riesgo
RET_ACUM <- BD$RET_ACUM[N] # Retorno acumulado desde inicio
VAL_PORT_ACUM_B100 <- BD$VAL_PORT_ACUM_B100[N] # Retorno acumulado base 100 desde inicio
RET_ACUM_ANUAL <- (1 + RET_ACUM)^(365*(NFHD-NFHC)/(N-1)) - 1 # Retorno acumulado anualizado desde inicio
MAXPERDACUM <- BD$MAX_PERD_ACUM[N] # Máxima pérdida desde inicio (MDD)
RAA_MPA <- RET_ACUM_ANUAL / -MAXPERDACUM # Retorno anual ajustado por riesgo de pérdida
# Otras estadísticas de riesgo - Volatilidad FH
BD$VolFH <- rollapplyr(data = BD$RET, width = VentanaMovilVol_FH, FUN = sd, fill = NA)
VolFH <- sd(BD$RET, na.rm = TRUE)
# Otras estadísticas de riesgo - Volatilidad diaria
BDRETDAILY$VolD <- rollapplyr(data = BDRETDAILY$RETDAY, width = VentanaMovilVol_Dias, FUN = sd, fill = NA)
VolD <- sd(BDRETDAILY$RETDAY, na.rm = TRUE)
# Otras estadísticas de riesgo - Volatilidad mensual
VolM <- BDRETDAILY %>% mutate(YEARMONTH = paste0(year(DATE), "-", format(DATE, "%m"))) %>%
mutate(VolM = sqrt(20) * VolD) %>%
select(DATE, YEARMONTH, VolM) %>%
group_by(YEARMONTH) %>%
top_n(1, DATE) %>%
select(-DATE)
BDRETMONTHLY$VolM <- VolM$VolM
VolM <- sqrt(20) * VolD
# Otras estadísticas de riesgo - Volatilidad anual
VolA <- BDRETDAILY %>% mutate(YEAR = year(DATE)) %>%
mutate(VolA = sqrt(252) * VolD) %>%
select(DATE, YEAR, VolA) %>%
group_by(YEAR) %>%
top_n(1, DATE)  %>%
select(-DATE)
BDRETANNUALY$VolA <- VolA$VolA
VolA <- sqrt(252) * VolD
# Otras estadísticas de riesgo - Razón de Sharpe (anual)
BDLibreRiesgo$RETLR <- c(0, rep(NA, (NLR-1)))
BDLibreRiesgo$RETLR <- ((BDLibreRiesgo$CLOSE / c(NA, BDLibreRiesgo$CLOSE[1:NLR-1]) - 1))
BDLibreRiesgo <- BDLibreRiesgo[, c("DATEFRAME", "RETLR")]
BD <- BD %>% left_join(BDLibreRiesgo, by = c("DATEFRAME"))
BD$RETLR[is.na(BD$RETLR)] <- 0
BD$RET_ACUM_LR <- c(0, rep(NA, (N-1)))
BD$RET_ACUM_LR <- c(NA, (cumprod(1 + BD$RETLR[2:N]) - 1))
BDRETLRDAILY <- BD %>% select(DATEFRAME, DATE, RETLR) %>%
group_by(DATE) %>%
mutate(RETLRDAY = cumprod(1 + na.replace(RETLR, 0)) - 1) %>%
top_n(1, DATEFRAME) %>%
select(-DATEFRAME, -RETLR)
BDRETDAILY$RETLRDAY <- BDRETLRDAILY$RETLRDAY
RET_PROM_LR_ANUAL <- mean(BDRETDAILY$RETLRDAY) * 30 * 12
RET_PROM_ANUAL <- mean(BDRETDAILY$RETDAY) * 30 * 12
SharpeRAnual <- (RET_PROM_ANUAL - RET_PROM_LR_ANUAL) / VolA
# Otras estadísticas de riesgo - Razón de Sortino (anual)
BD$RETINFOBJ <- ifelse(BD$RET > BD$RETLR, 0, (BD$RET - BD$RETLR))
BD$VolInfObjFH <- rollapplyr(data = BD$RETINFOBJ, width = VentanaMovilVol_FH, FUN = sd, fill = NA)
VolInfObjFH <- sd(BD$RETINFOBJ, na.rm = TRUE)
BDRETDAILY$RETINFOBJ <- ifelse(BDRETDAILY$RETDAY > BDRETDAILY$RETLRDAY,
0,
(BDRETDAILY$RETDAY - BDRETDAILY$RETLRDAY)
)
BDRETDAILY$VolInfObjD <- rollapplyr(data = BDRETDAILY$RETINFOBJ, width = VentanaMovilVol_Dias, FUN = sd, fill = NA)
VolInfObjD <- sd(BDRETDAILY$RETINFOBJ, na.rm = TRUE)
VolInfObjM <- BDRETDAILY %>% mutate(YEARMONTH = paste0(year(DATE), "-", format(DATE, "%m"))) %>%
mutate(VolInfObjM = sqrt(20) * VolInfObjD) %>%
select(DATE, YEARMONTH, VolInfObjM) %>%
group_by(YEARMONTH) %>%
top_n(1, DATE) %>%
select(-DATE)
BDRETMONTHLY$VolInfObjM <- VolInfObjM$VolInfObjM
VolInfObjM <- sqrt(20) * VolInfObjD
VolInfObjA <- BDRETDAILY %>% mutate(YEAR = year(DATE)) %>%
mutate(VolInfObjA = sqrt(252) * VolInfObjD) %>%
select(DATE, YEAR, VolInfObjA) %>%
group_by(YEAR) %>%
top_n(1, DATE)  %>%
select(-DATE)
BDRETANNUALY$VolInfObjA <- VolInfObjA$VolInfObjA
VolInfObjA <- sqrt(252) * VolInfObjD
RET_PROM_OBJ_ANUAL <- RET_PROM_LR_ANUAL
SortinoRAnual <- (RET_PROM_ANUAL - RET_PROM_OBJ_ANUAL) / VolInfObjA
# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (diarios)
HVaRD <- quantile(x = BDRETDAILY$RETDAY, probs = Significancia)
HCVaRD <- mean(BDRETDAILY$RETDAY[which(BDRETDAILY$RETDAY < HVaRD)])
# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (mensuales)
HVaRM <- quantile(x = BDRETMONTHLY$RETMONTH, probs = Significancia)
HCVaRM <- mean(BDRETMONTHLY$RETMONTH[which(BDRETMONTHLY$RETMONTH < HVaRM)])
# Otras estadísticas de riesgo - VaR histórico y CVaR histórico (anuales)
BDRETMONTHLY$RET12MONTHS <- t(last(t(rollapplyr(data = (1+BDRETMONTHLY$RETMONTH),
width = 12,
FUN = cumprod,
fill = NA
)
)
)
) -
1
HVaRA <- quantile(x = BDRETMONTHLY$RET12MONTHS, probs = Significancia, na.rm = TRUE)
HCVaRA <- mean(BDRETMONTHLY$RET12MONTHS[which(BDRETMONTHLY$RET12MONTHS < HVaRA)], na.rm = TRUE)
#PVaRM <-
#PCVaRM <-
#PVaRA <-
#PCVaRA <-
#Porcentaje de retornos negativos
#Frecuencia de retornos menores a -1%, -5%, -10%, objetivo (libre riesgo)
#Peor retorno
# Gráfico utilidad acumulada
G_VAL_PORT_ACUM_B100 <- ggplot(BD, aes(x = DATE, y = VAL_PORT_ACUM_B100)) +
geom_line(size = 1) +
ggtitle("Valor portafolio (Base 100)") +
xlab("Fecha") + ylab("Valor (Base 100)") +
expand_limits(x =BD$DATE[1]) +
expand_limits(y = 0) +
PlantillaG
#Resultados
BD_Est_Retorno_Riesgo <- list(BD = BD,
BDRDiario = BDRETDAILY,
BDRMensual = BDRETMONTHLY,
BDRAnual = BDRETANNUALY,
VAlPortAcumB100 = VAL_PORT_ACUM_B100,
RetAcumAnual = RET_ACUM_ANUAL,
MaxPerdAcum = MAXPERDACUM,
RAA_MPA = RAA_MPA,
VolatilidadFH = VolFH,
VolatilidadDiaria = VolD,
VolatilidadMensual = VolM,
VolatilidadAnual = VolA,
RetornoPromedioLRAnual = RET_PROM_LR_ANUAL,
RetornoPromedioAnual = RET_PROM_ANUAL,
RazonSharpeAnual = SharpeRAnual,
VolatilidadInferiorObjetivoFH = VolInfObjFH,
VolatilidadInferiorObjetivoDiaria = VolInfObjD,
VolatilidadInferiorObjetivoMensual = VolInfObjM,
VolatilidadInferiorObjetivoAnual = VolInfObjA,
RetornoPromedioObjetivoAnual = RET_PROM_OBJ_ANUAL,
RazonSortinoAnual = SortinoRAnual,
VaRHistoricoDiario = HVaRD,
CVaRHistoricoDiario = HCVaRD,
VaRHistoricoMensual = HVaRM,
CVaRHistoricoMensual = HCVaRM,
VaRHistoricoAnual = HVaRA,
CVaRHistoricoAnual = HCVaRA,
Graf_ValPortAcumB100 = G_VAL_PORT_ACUM_B100
)
return(BD_Est_Retorno_Riesgo)
}
BDPSList <- lapply(BDPSList, Fun_Est_Riesgo_Retorno) # Construye lista de listas
names(BDPSList) <- rownames(Senales)
#
# 14. RESUMEN ESTADÍSTICAS ESTRATEGIAS [PROPUESTA] ############################
# Función para obtención de estadísticas totales de retorno y riesgo de cada estrategia
Fun_R_R_Tot <- function(List) {
R_R <- data.frame(VAlPortAcumB100 = List$VAlPortAcumB100,
RetAcumAnual = List$RetAcumAnual,
MaxPerdAcum = List$MaxPerdAcum,
RAA_MPA = List$RAA_MPA,
VolatilidadFH = List$VolatilidadFH,
VolatilidadDiaria = List$VolatilidadDiaria,
VolatilidadMensual = List$VolatilidadMensual,
VolatilidadAnual = List$VolatilidadAnual,
RetornoPromedioLRAnual = List$RetornoPromedioLRAnual,
RetornoPromedioAnual = List$RetornoPromedioAnual,
RazonSharpeAnual = List$RazonSharpeAnual,
VolatilidadInferiorObjetivoFH = List$VolatilidadInferiorObjetivoFH,
VolatilidadInferiorObjetivoDiaria = List$VolatilidadInferiorObjetivoDiaria,
VolatilidadInferiorObjetivoMensual = List$VolatilidadInferiorObjetivoMensual,
VolatilidadInferiorObjetivoAnual = List$VolatilidadInferiorObjetivoAnual,
RetornoPromedioObjetivoAnual = List$RetornoPromedioObjetivoAnual,
RazonSortinoAnual = List$RazonSortinoAnual,
VaRHistoricoDiario = List$VaRHistoricoDiario,
CVaRHistoricoDiario = List$CVaRHistoricoDiario,
VaRHistoricoMensual = List$VaRHistoricoMensual,
CVaRHistoricoMensual = List$CVaRHistoricoMensual,
VaRHistoricoAnual = List$VaRHistoricoAnual,
CVaRHistoricoAnual = List$CVaRHistoricoAnual
)
return(R_R)
}
# Obtención y exportación de estadísticas retorno y riesgo de cada estrategia
SenalesSwell <- Senales
Senales <- cbind(Senales, t(sapply(BDPSList, Fun_R_R_Tot)))
Senales$RetAcum <- unlist(Senales$RetAcum)
Senales$ValAcumB100 <- unlist(Senales$ValAcumB100)
Senales$MaxPerdAcum <- unlist(Senales$MaxPerdAcum)
Senales$RAA_MPA <- unlist(Senales$RAA_MPA)
Senales$RazonSharpeAnual <- unlist(Senales$RazonSharpeAnual)
Senales$RazonSortinoAnual <- unlist(Senales$RazonSortinoAnual)
# Gráfico RetAcum/MDD por estrategia
G_RetAcum_MDD <- ggplot(Senales, aes(x = rownames(Senales), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD por estrategia") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD,
filename = "Ret.Acum_MDD por estrategia.png",
scale = 2
)
# Gráfico RetAcum/MDD para estrategias por encima del promedio
Estrategias_RAA_MPA_Mayores_Promedio <-  Senales %>% filter(RAA_MPA > mean(RAA_MPA))
G_RetAcum_MDD_MayMed <- ggplot(Estrategias_RAA_MPA_Mayores_Promedio,
aes(x = reorder(rownames(Estrategias_RAA_MPA_Mayores_Promedio), RAA_MPA), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD para estrategias por encima del promedio") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD_MayMed)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD_MayMed,
filename = "Ret.Acum_MDD para estrategias por encima del promedio.png",
scale = 2
)
# Gráfico RetAcum/MDD para estrategias por encima del objetivo
RA_MDD_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "RA_MDD_Objetivo",
col_names = FALSE
)
)
Estrategias_RAA_MPA_Mayores_Objetivo <-  Senales %>% filter(RAA_MPA > RA_MDD_Objetivo)
G_RetAcum_MDD_MayObj <- ggplot(Estrategias_RAA_MPA_Mayores_Objetivo,
aes(x = reorder(rownames(Estrategias_RAA_MPA_Mayores_Objetivo), RAA_MPA), y = RAA_MPA)) +
geom_col() +
ggtitle("Ret.Acum/MDD para estrategias por encima del objetivo") +
xlab("Estrategia") + ylab("Ret.Acum/MDD") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_RetAcum_MDD_MayObj)
ggsave(path = BaseDirPath,
plot = G_RetAcum_MDD_MayObj,
filename = "Ret.Acum_MDD para estrategias por encima del objetivo.png",
scale = 2
)
# Gráfico razón de Sharpe por estrategia
G_SharpeR <- ggplot(Senales, aes(x = rownames(Senales), y = RazonSharpeAnual)) +
geom_col() +
ggtitle("Razón de Sharpe por estrategia") +
xlab("Estrategia") + ylab("Razón de Sharpe") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_SharpeR)
ggsave(path = BaseDirPath,
plot = G_SharpeR,
filename = "Razón de Sharpe por estrategia.png",
scale = 2
)
# Gráfico Razón de Sharpe para estrategias por encima del promedio
Estrategias_Sharpe_Mayores_Promedio <-  Senales %>% filter(RazonSharpeAnual > mean(RazonSharpeAnual))
G_Sharpe_MayMed <- ggplot(Estrategias_Sharpe_Mayores_Promedio,
aes(x = reorder(rownames(Estrategias_Sharpe_Mayores_Promedio), RazonSharpeAnual), y = RazonSharpeAnual)) +
geom_col() +
ggtitle("Razón de Sharpe para estrategias por encima del promedio") +
xlab("Estrategia") + ylab("Razón de Sharpe") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_Sharpe_MayMed)
ggsave(path = BaseDirPath,
plot = G_Sharpe_MayMed,
filename = "Razón de Sharpe para estrategias por encima del promedio.png",
scale = 2
)
# Gráfico Razón de Sharpe para estrategias por encima del objetivo
Sharpe_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "Sharpe_Objetivo",
col_names = FALSE
)
)
Estrategias_Sharpe_Mayores_Objetivo <-  Senales %>% filter(RazonSharpeAnual > Sharpe_Objetivo)
G_Sharpe_MayObj <- ggplot(Estrategias_Sharpe_Mayores_Objetivo,
aes(x = reorder(rownames(Estrategias_Sharpe_Mayores_Objetivo), RazonSharpeAnual), y = RazonSharpeAnual)) +
geom_col() +
ggtitle("Razón de Sharpe para estrategias por encima del objetivo") +
xlab("Estrategia") + ylab("Razón de Sharpe") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_Sharpe_MayObj)
ggsave(path = BaseDirPath,
plot = G_Sharpe_MayObj,
filename = "Razón de Sharpe para estrategias por encima del objetivo.png",
scale = 2
)
# Gráfico Razón de Sortino por estrategia
G_SortinoR <- ggplot(Senales, aes(x = rownames(Senales), y = RazonSortinoAnual)) +
geom_col() +
ggtitle("Razón de Sortino por estrategia") +
xlab("Estrategia") + ylab("Razón de Sortino") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_SortinoR)
ggsave(path = BaseDirPath,
plot = G_SortinoR,
filename = "Razón de Sortino por estrategia.png",
scale = 2
)
# Gráfico Razón de Sortino para estrategias por encima del promedio
Estrategias_Sortino_Mayores_Media <-  Senales %>% filter(RazonSortinoAnual > mean(RazonSortinoAnual))
G_Sortino_MayMed <- ggplot(Estrategias_Sortino_Mayores_Media,
aes(x = reorder(rownames(Estrategias_Sortino_Mayores_Media), RazonSortinoAnual), y = RazonSortinoAnual)) +
geom_col() +
ggtitle("Razón de Sortino para estrategias por encima del promedio") +
xlab("Estrategia") + ylab("Razón de Sortino") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_Sortino_MayMed)
ggsave(path = BaseDirPath,
plot = G_Sortino_MayMed,
filename = "Razón de Sortino para estrategias por encima del promedio.png",
scale = 2
)
# Gráfico Razón de Sortino para estrategias por encima del objetivo
Sortino_Objetivo <- as.numeric(read_excel(ArchivoCargue,
sheet = "Sortino_Objetivo",
col_names = FALSE
)
)
Estrategias_Sortino_Mayores_Objetivo <-  Senales %>% filter(RazonSortinoAnual > Sortino_Objetivo)
G_Sortino_MayObj <- ggplot(Estrategias_Sortino_Mayores_Objetivo,
aes(x = reorder(rownames(Estrategias_Sortino_Mayores_Objetivo), RazonSortinoAnual), y = RazonSortinoAnual)) +
geom_col() +
ggtitle("Razón de Sortino para estrategias por encima del objetivo") +
xlab("Estrategia") + ylab("Razón de Sortino") +
expand_limits(x = 0) +
expand_limits(y = 0) +
PlantillaG
print(G_Sortino_MayObj)
ggsave(path = BaseDirPath,
plot = G_Sortino_MayObj,
filename = "Razón de Sortino para estrategias por encima del objetivo.png",
scale = 2
)
# 15. ESTRATEGIA ÓPTIMA [PROPUESTA] ###########################################
# Identificación estrategia óptima
NEstrategiaOpt <- which.max(Senales$RAA_MPA)
EstrategiaOpt <- rownames(Senales)[NEstrategiaOpt]
paste0("La estrategia óptima es ", EstrategiaOpt)
# Visualización y exportación BD estrategia óptima
View(BDPSList[[EstrategiaOpt]]$BD)
ArchivoResultadosOpt <- createWorkbook()
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "Senales")
writeData(wb = ArchivoResultadosOpt, sheet = "Senales", x = Senales)
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "BDI")
writeData(wb = ArchivoResultadosOpt, sheet = "BDI", x = BDPSList[[EstrategiaOpt]]$BD)
# Visualización y exportación gráfico valor portafolio estrategia óptima
Graf_ValPortAcumB100 <- BDPSList[[EstrategiaOpt]]$Graf_ValPortAcumB100 +
ggtitle(paste0("Valor portafolio estrategia ", EstrategiaOpt, " (Base 100)"))
print(Graf_ValPortAcumB100)
ggsave(path = BaseDirPath,
plot = Graf_ValPortAcumB100,
filename = "Valor portafolio estrategia.png",
scale = 2
)
# Visualización y exportación de estadísticas de retorno y riesgo de estrategia óptima
View(BDPSList[[EstrategiaOpt]]$BDRDiario)
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "RetornosDiarios")
writeData(wb = ArchivoResultadosOpt, sheet = "RetornosDiarios", x = BDPSList[[EstrategiaOpt]]$BDRDiario)
View(BDPSList[[EstrategiaOpt]]$BDRMensual)
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "RetornosMensuales")
writeData(wb = ArchivoResultadosOpt, sheet = "RetornosMensuales", x = BDPSList[[EstrategiaOpt]]$BDRMensual)
View(BDPSList[[EstrategiaOpt]]$BDRAnual)
addWorksheet(wb = ArchivoResultadosOpt, sheetName = "RetornosAnuales")
writeData(wb = ArchivoResultadosOpt, sheet = "RetornosAnuales", x = BDPSList[[EstrategiaOpt]]$BDRAnual)
Nombre_BD_EstrategiaOpt <- Senales$NombreBD[NEstrategiaOpt]
NombreArchivoResultadosOpt <- paste0(Nombre_BD_EstrategiaOpt, "_Propuesta.xlsx")
saveWorkbook(wb = ArchivoResultadosOpt,
file = NombreArchivoResultadosOpt,
overwrite = TRUE
)
#
